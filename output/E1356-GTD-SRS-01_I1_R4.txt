The Basic Library shall implement the following procedures of the ISO C99 standard [RD03] :sin Procedure returning the trigonometric sineasin Procedure returning the trigonometric arcsinecos Procedure returning the trigonometric cosineacos Procedure returning the trigonometric arccosinetan Procedure returning the trigonometric tangentatan Procedure returning the trigonometric arctangentsqrt Procedure returning the square rootatan2 Procedure returning the trigonometric arctangentofy/xexp Procedure returning the base Eexponential of xpow Procedure returning xraised to the power of ylog Procedure returning the natural logarithmlog10 Procedure returning the base 10 logarithmfabs Procedure returning the absolute value     round Procedure for rounding to the nearest integer(Halfway values rounded away from 0)floor Procedure for rounding downwards to the nearestintegertrunc Procedure for rounding towards 0 to the nearestintegerceil Procedure for rounding upwards to the nearestintegerfmod Procedure returning the floating-point remainderofx/ymodf Procedure breaking xin its integral and fractionalpartfmin Procedure returning the smaller of two valuesfmax Procedure returning the larger of two valueshypot Procedure returning the square root of x2+y2isfinite Procedure returning whether the value of theargument is finite or not (not ±Infand not Not a Number)isinf Procedure returning whether the value of theargument is positive or negative Infinity or notisnan Procedure returning whether the argument is anot-a-number (Not a Number) floating-point value or notsignbit Procedure returning whether the argument isnegative or notcopysign Procedure returning a floating-point number withthe magnitude ofxand the sign of y[SEP] The description of these procedures are not to be understood as the requirements and specification of the procedures but as a description for identification purposes. For the exact specification of the procedure refer to the ISO C99 standard. [END]
The Basic Library shall implement the following additional procedures:deg2rad Procedure returning the radians value of a provided degree valuerem2pi Procedure returning the provided value reduced to the range [+0,2π][SEP]The description of these procedures are not to be understood as the requirements and specification of the procedures but as a description for identification purposes. [END]
The Basic Library shall provide procedures for 32 bit (binary32) and 64 bit (binary64) precision floating-point datums.[SEP]This refers to the ISOC99 procedures with 32 bit floating-point arguments and return values and the procedures with 64 bit floating-point arguments and return values (e.g. floatsinf(float x) and double sin(double x) ).[END]
The Basic Library shall provide the following constants: M_E Value ofeM_LOG2E Value oflog10eM_LOG10E Value oflog2eM_LN2 Value ofloge2M_LN10 Value ofloge10M_PI Value ofπM_PI_2 Value ofπ2M_PI_4 Value ofπ4M_1_PI Value of1πM_2_PI Value of2πM_2_SQRTPI Value of2√πM_SQRT2 Value of√2M_SQRT1_2 Value of/radicalBig12HUGE_VAL Value of +Inf(double)HUGE_VALF Value of +Inf(float)INFINITY Value of +InfNAN Value of Not a NumberMAXFLOAT Synonym of FLT_MAX[SEP]Both INFINITY and NAN expand to floats or doubles depending on the context. [END]
The Basic Library shall consider all arguments and return values that represent an angle to be in radians unless otherwise specified. [END]
Thedeg2rad and deg2radf procedures shall return the radians value equal to the argument x given in degrees. [END]
Thedeg2rad and deg2radf procedures shall return Not a Number if the argument is Not a Number.[END]
Thedeg2rad and deg2radf procedures shall return the value of the argument if the argument is ±0or±Inf.[END]
The rem2pi and rem2pif procedures shall return the positive remainder of the argument xn-times divided by the value 2πsuch that:+0≤x−n∗2π≤2π[SEP]The target range is [+0,+2π].ncan be a positive or negative integer. [END]
The rem2pi and rem2pif procedures shall return Not a Numberif the argument is Not a Number.[END]
The rem2pi and rem2pif procedures shall return the value of the argument if the argument is ±0.[END]
The rem2pi and rem2pif procedures shall return Not a Numberif the argument is ±Inf.[END]
The sin and sinf procedures shall evaluate the sineof their argument xin radians. [END]
The sin and sinf procedures shall use a minimax polynomial for the calculation. [END]
The sin and sinfprocedures shall return Not a Numberif the argument is Not a Number.[END]
The sin and sinf procedures shall return the value of the argument if the argument is ±0.[END]
The sin and sinf procedures shall return Not a Number if xis±Inf.[END]
The asin and asinf procedures shall evaluate the arcsine of their argument xin the outputrange [-π2,π2] radians. [END]
The asin and asinf procedures shall use a rational approximation for the calculation. [END]
The asin and asinf procedures shall return Not a Numberif the argument is Not a Number.[END]
The asin and asinf procedures shall return the value of the argument if the argument is ±0.[END]
The asin and asinf procedures shall return Not a Numberif the argument is ±Inf.[END]
The asin and asinf procedures shall return Not a Numberif the argument is not in the range [-1, 1]. [END]
The cos and cosf procedures shall evaluate the cosineof their argument xin radians. [END]
The cos and cosf procedures shall use a minimax polynomial for the calculation. [END]
The cos and cosf procedures shall return Not a Numberif the argument is Not a Number.[END]
The cos and cosf procedures shall return 1.0if the argument is ±0.[END]
The cos and cosf procedures shall return Not a Number, if the argument is ±Inf.[END]
The acos and acosf procedures shall evaluate the principal value of the arccosine of their argument xin the output range [0, π] radians. [END]
The acos and acosf procedures shall use a rational approximation for the calculation. [END]
The acos and acosf procedures shall return Not a Number, if the argument x is not in the range [-1,1]. [END]
The acos and acosf procedures shall return Not a Numberif the argument is Not a Number.[END]
The acos and acosf procedures shall return +0if the argument is +1.[END]
The acos and acosf procedures shall return Not a Number if the argument x is±Inf.[END]
The tan and tanf procedures shall evaluate the tangent of their argument xin radians. [END]
The tan and tanf procedures shall use a minimax polynomial for the calculation. [END]
The tan and tanf procedures shall return Not a Numberif the argument is Not a Number.[END]
The tan and tanf procedures shall return the value of the argument if the argument is ±0.[END]
The tan and tanf procedures shall return Not a Number, if the argument is ±Inf.[END]
The atan and atanf procedures shall calculate the arctangent of their argument x in the output range [-π2,π2] radians. [END]
The atan and atanf procedures shall use a minimax polynomial for the calculation. [END]
The atan and atanf procedures shall return Not a Number if the argument is Not a Number.[END]
The atan and atanf procedures shall return the argument if the argument is ±0.[END]
The atan and atanf procedures shall return ±π2if the argument is ±Inf.[END]
The atan2 and atan2f procedures shall calculate the arctangent of the division y/xof their arguments x and y in the output range [- π,π] radians. [END]
The atan2 and atan2f procedures shall use atan and atanf procedures. [END]
The atan2 and atan2f procedures shall return ± π, if the argument y is ±0and the argument x< 0.[END]
The atan2 and atan2f procedures shall return ±0, if the argument y is ±0and the argument x> 0.[END]
The atan2 and atan2f procedures shall return -π2, if the argument y is <0 and the argument x is ±0.[END]
The atan2 and atan2f procedures shall return π2, if the argument y is > 0 and the argument x is ±0.[END]
The atan2 and atan2f procedures shall return Not a Number if any argument is Not a Number.[END]
The atan2 and atan2f procedures shall return ± π, if the argument y is ±0 and the argument x is -0.[END]
The atan2 and atan2f procedures shall return ±0, if the argument y is ±0 and the argument x is +0.[END]
The atan2 and atan2f procedures shall return ± π, if the argument ± y is finite and not 0, and the argument x is -Inf.[END]
The atan2 and atan2f procedures shall return ±0, if the argument ± yis finite and not 0, and the argument x is +Inf.[END]
The atan2 and atan2f procedures shall return ±π2, if the argument y is ±Inf and the argument x has a finite value. [END]
The atan2 and atan2f procedures shall return ±3π4, if the argument y is ± Infand the argument x is -Inf.[END]
The atan2 and atan2f procedures shall return ±π4, if the argument y is ±Inf and the argument x is +Inf.[END]
The sqrt and sqrtf procedures shall calculate the square root of their argument x.[END]
The sqrt and sqrtf procedures shall return Not a Number, if the argument x < -0.[END]
The sqrt and sqrtf procedures shall return Not a Number if the argument x is Not a Number.[END]
The sqrt and sqrtf procedures shall return the argument if the argument x is ±0 or +Inf.[END]
The sqrt and sqrtf procedures shall return Not a Number, if the argument x is -Inf.[END]
The exp and expf procedures shall calculate the base eexponential value of their argument x.[END]
The exp and expf procedures shall use a minimax polynomial for the calculation. [END]
The exp and expf procedures shall return Not a Number if the argument x is Not a Number.[END]
The exp and expf procedures shall return 1 if the argument x is ±0.[END]
The exp and expf procedures shall return +0 if the argument x is -Inf.[END]
The exp and expf procedures shall return the argument if the argument x is +Inf.[END]
The pow and powf procedures shall calculate the value of their argument x raised to the power of y.[END]
The pow and powf procedures shall use a binary logarithm for the calculation. [END]
The pow and powf procedures shall return Not a Number if the argument x is < 0 and finite, and the argument y is a finite, non-integer value. [END]
The pow and powf procedures shall return ±Inf respectively if y is an odd integer, or +Inf if y is not an odd integer if the argument y is < 0 and x is ±0.[END]
The pow and powf procedures shall return Not a Number if the argument y is Not a Number and x is not 1, or the argument x is Not a Number and y is not ±0.[END]
The pow and powf procedures shall return ±0 respectively, if the argument x is ±0 and the argument y is an odd integer > 0. [END]
The pow and powf procedures shall return +0, if the argument x is ±0 and the argument y is >0 and not an odd integer. [END]
The pow and powf procedures shall return 1.0 if the argument x is +1.[END]
The pow and powf procedures shall return 1.0 if the argument y is ±0.[END]
The pow and powf procedures shall return 1.0 if the argument x is -1, and the argument y is ±Inf.[END]
The pow and powf procedures shall return +Inf if |x|<1 and the argument y is -Inf.[END]
The pow and powf procedures shall return +0, if |x|>1 and the argument y is-Inf.[END]
The pow and powf procedures shall return +0, if |x|<1 and the argument y is +Inf.[END]
The pow and powf procedures shall return +Inf, if |x|>1 and the argument y is +Inf.[END]
The pow and powf procedures shall return -0, if the argument x is -Inf and the argument y is an odd integer < 0. [END]
The pow and powf procedures shall return +0, if the argument x is -Inf and the argument y is <0 and not an odd integer. [END]
The pow and powf procedures shall return -Inf, if the argument x is -Inf and the argument y is an odd integer > 0. [END]
The pow and powf procedures shall return +Inf, if the argument x is -Inf and the argument y is> 0 and not an odd integer. [END]
The pow and powf procedures shall return +0, if the argument x is +Inf and the argument y<0.[END]
The pow and powf procedures shall return +Inf, if the argument x is+ Inf and the argument y>0.[END]
The log and logf procedures shall calculate the natural logarithm of their argument x.[END]
The log and logf procedures shall return -Inf if the argument x is ±0.[END]
The log and logf procedures shall return Not a Number if the argument x is finite and less than 0 or x is -Inf.[END]
The log and logf procedures shall return Not a Number, if the argument x is Not a Number.[END]
The log and logf procedures shall return +0, if the argument x is 1.[END]
The logand logf procedures shall return +Inf, if the argument x is +Inf.[END]
The log10 and log10f procedures shall calculate the base 10 logarithm of their argument x.[END]
The log10 and log10f procedures shall return -Inf if the argument x is ±0.[END]
The log10 and log10f procedures shall return Not a Number if the argument x is finite and less than 0 or x is -Inf.[END]
The log10 and log10f procedures shall return Not a Number, if the argument x is Not a Number.[END]
The log10 and log10f procedures shall return +0, if the argument x is 1.[END]
The log10 and log10f procedures shall return +Inf, if the argument x is +Inf.[END]
The fabs and fabsf procedures shall calculate the absolute values of their argument x.[END]
The fabs and fabsf procedures shall return Not a Number, if the argument x is Not a Number.[END]
The fabs and fabsf procedures shall return +0, if the argument x is ±0.[END]
The fabs and fabsf procedures shall return +Inf, if the argument x is ±Inf.[END]
The roundand roundf procedures shall round their argument x to the nearest integer value, rounding halfway cases away from zero. [END]
The round and roundf procedures shall return Not a Number, if the argument x is Not a Number.[END]
The round and roundf procedures shall return the argument, if the argument x is ±0 or ±Inf.[END]
The floor and floorf procedures shall calculate the largest integral value not greater than their argument x.[END]
The floor and floorf procedures shall return Not a Number, if the argument x is Not a Number.[END]
The floor and floorf procedures shall return the argument, if the argument x is ±0 or ±Inf.[END]
The trunc and truncf procedures shall round their argument x to the integer value nearest to but no larger in magnitude than the argument. [END]
The trunc and truncf procedures shall return Not a Number, if the argument x is Not a Number.[END]
The trunc and truncf procedures shall return the argument, if the argument x is ±0 or ±Inf.[END]
The ceil and ceilf procedures shall compute the smallest integral value not less than argument x.[END]
The ceil and ceilf procedures shall return Not a Number, if the argument x is Not a Number.[END]
The ceil and ceilf procedures shall return the argument, if the argument x is ±0 or ±Inf.[END]
The fmod and fmodf procedures shall calculate the floating-point remainder of the division of the argument x by the argument y.[SEP]The sign of the remainder is defined by the ISOC99 standard as the sign of the dividend (argument x). Therefore an argument y < 0 produces the same result as it’s absolute value. Example: Input of x = 3.456 an dy=- 2 results in a return value of 1.456. [END]
The fmod and fmodf procedures shall return Not a Number, if any argument is Not a Number.[END]
The fmod and fmodf procedures shall return Not a Number, if the argument y is 0.[END]
The fmod and fmodf procedures shall return Not a Number, if the argument x is ±Inf. [END]
The fmod and fmodf procedures shall return ±0, if the argument x is ±0 and the argument y is not zero. [END]
The fmod and fmodf procedures shall return the argument x, if the argument x is not ± Inf and the argument y is ±Inf.[END]
The modf and modff procedures shall compute the integral and fractional part of the argument x.[SEP]The sign of both the integral and fractional part is defined by the ISOC99 standard as the sign of the argument x.Example: Input of x=-3.456 results in a return value of -0.456 and sets the value pointed to by the argument ∗iptrto -3.0. [END]
The modf and modff procedures shall return the fractional part of the argument x and write the integral part of the argument x to the pointer provided by the argument ∗iptr.[END]
The modf and modff procedures shall return Not a Number and set the argument ∗iptr to Not a Number, if the argument x is Not a Number.[END]
The modf and modff procedures shall return ±0 and set the argument ∗iptr to ±Inf, if the argument x is ±Inf.[END]
The fmin and fminfproceduresshalldeterminetheminimumnumericvalueoftheargument xand y.[SEP]This includes ±Inf, with -Infbeing lesser than any other numeric value and +Infbeing greater than any other numeric value. [END]
The fminand fminf procedures shall return Not a Number, if the arguments x and y are Not a Number.[END]
The fmin and fminf procedures shall return the one argument if only the other argument is Not a Number.[END]
The fmin and fminf procedures shall return the y argument if both arguments are zero. [END]
The fmax and fmaxf procedures shall determine the maximum numeric value of the argument x and y.[SEP]This includes ±Inf, with -Inf being lesser than any other numeric value and +Inf being greater than any other numeric value. [END]
The fmax and fmaxf procedures shall return Not a Number, if the arguments x and y are Not a Number.[END]
The fmax and fmaxf procedures shall return the one argument if only the other argument is Not a Number.[END]
The fmax and fmaxf procedures shall return the y argument if both arguments are zero. [END]
The hypot and hypotf procedures shall compute the length of the hypotenuse of a right angled triangle with sides of length x and y.[END]
The hypot and hypotf procedures shall return +Inf, if one of the arguments x or y is ±Inf.[END]
The hypot and hypotf procedures shall return Not a Number, if one of the arguments x or y is Not a Number and the other is not ±Inf.[END]
The isfinite procedure shall return a non-zero value if the argument x has a finite value and is neither Not a Number nor ±Inf.[END]
The isinf procedure shall return a non-zero value if and only if the argument x is ±Inf.[END]
The isnan procedure shall return a non-zero value if and only if the argument x is Not a Number.[END]
The signbit procedure shall return a non-zero value if and only if the argument x is negative.[END]
The copysign and copysignf procedures shall compute a new number with the magnitude of the argument xand the the sign of y.[SEP]This includes Not a Number values for argument y, as Not a Number values have a sign just as any other value.[END]
The copysign and copysignf procedures shall return Not a Number if the argument x is Not a Number.[END]
The execution time of all procedures shall be bounded. [END]
The execution time of all procedures shall be characterizable within subdomains which cover the complete domain of the procedure.[SEP]For example the sin procedure can be split into the subdomains ( -Inf,−2−27],(−2−27,+2−27) and [ +2−27,+Inf), figure5.1 shows a plot of the execution time of sine for positive argu-ments. [END]
The Worst Case Execution Time of the procedures shall not deviate by more than 30% from the median execution times of the characterized ranges.[SEP]The median shall be defined with random arguments within the range. [END]
The Basic mathematical Library procedure results shall differ from theoretical results by less than 0.5 Units in the Last Place.[END]
The Basic Library shall be compliant to IEEE 754-2008. [END]
The Basic Library shall be compatible with code auto-generated with Matlab R2016a SimulinkCoder.[SEP]The auto-generated code will require an include of mlfs.h. All C definition and function signatures not present in mlfs.hneed to be providedby the user. He will then have to link his own libm after linking with the Mathematical Library for Flight Software. [END]
The Basic Library shall provide best practices within the Software User Manual to produce Ada wrappers to enable the use of the library from Ada83 and Ada95. [END]
The Basic Library shall provide best practices within the Software User Manual to produce C-MEX function wrappers, to enable the use of the Basic Library in Matlab and Simulink Matlab function blocks. [END]
The Basic Library shall provide best practices within the Software User Manual to produce S-function wrappers,to enable the use of the Basic Library in Simulink. [END]
The Basic Library shall run on x86-64 and SPARC V8 processor architectures. [END]
The Basic Library shall contribute less than 100kB to the size of the final On-Board Software executable. [END]
For the Basic Library it shall be selectable for which processor architecture it will be compiled. [END]
For the Basic Library it shall be configurable which procedures of the library will be included inthe linking step. [END]
The Basic Library procedures shall be reentrant and thread-safe. [END]
The Basic Library design shall define the behavior of the procedures in a tabular format, presenting the parameter domain decomposition and the corresponding output. [END]
The Basic Library design shall justify every modification to be carried out on the reused library.[END]
The Basic Library shall be implemented in ISO C99. [END]
The Basic Library shall be compliant to the math.h definitions as per ISO C99 standard [RD03].[END]
The Basic Library shall not provide error handling with the errnoglobal variable.[SEP]All procedures that would have produced an error will instead return a defined value, often Not a Number.[END]
The Basic Library shall be compileable with GNU C Compiler version 4.2.1 with Binutils version 2.18. [END]
The Basic Library shall be compatible to Real-Time Executive for Multiprocessor Systems Operating System version 4.8 distributed by Edisoft. [END]
The Basic Library shall not use Floating Point Unit )builtin functions for elementary math function evaluation. [END]
The Basic Library shall not rely on the presence of the Fused Multiply-Add (Fused Multiply-Add) operation foralgorithm optimization. [END]
The Basic Library shall be able to convert to a modus that mirrors the Floating Point Unit’s behaviour regarding subnormal numbers in case the Floating Point Unit does not handle subnormal numbers the same as normalnumbers.[SEP]For example the Floating Point Unit may simply throw a trap, or have the possibility to be set toDenormals are Zero (Denormals are Zero) and Flush to Zero (Flush to Zero) behaviour. In both cases the library shallbehave the same way as the Floating Point Unit does. [END]
The Basic Library source shall be compliant to the mandatory and required rules depicted in MISRA C:2012 [RD06]. [END]
The Basic Library shall provide a justification for not respected required rules in MISRA C:2012[RD06]. [END]
The Basic Library shall comply to the mandatory metrics provided by European Cooperation for Space Standardization-HB-Q-80 [RD05] with their proposed targets. [END]
The Basic Library shall comply to the following project depending mandatory metrics proposedby European Cooperation for Space Standardization-HB-Q-80 [RD05]: Statement Coverage (Source Code) 1 Modified Condition and Decision Coverage (Source Code) 1 Reuse modification rate 0.3 Code size stability 1.3 Requirement stability 0.3[END]
The Basic Library shall comply to required metric ‘User documentation completeness’ proposedby European Cooperation for Space Standardization-HB-Q-80 [RD05] with their proposed targets. [END]
The Basic Library shall return the exact same value whenever a procedure is called multiple times with the same argument(s). [END]
The Basic Library shall never cause either CPU or Floating Point Unit to stop. [END]
The Basic Library source shall be delivered as a collection of C source files.[SEP]There will be neither a binary nor an executable delivered. [END]
The Basic Library shall be delivered with a GNU Make makefile and associated scripts to confi-gure, build and install the Basic Library. [END]
Each modified or newly created file, be it source or documentation, of the Basic Library shall contain a header including the European Space Agency copyright notice: 20xx[SEP]xx corresponds to the applicable year. [END]
The Basic Library shall use 32bit and 64bit IEEE 754 [RD01] floating-point datums as well as 32bit integers to exchange data. [END]