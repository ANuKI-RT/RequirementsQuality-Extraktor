  5 Requirements5.1 GeneralThe requirements defined in this Software Requirements Specication have the following associated meta-data:â€¢ Requirement identifier: Unique identifier in the form of REQ-Basic mathematical Library-NNNN where:â€“REQ stands for "Requirement",â€“Basic mathematical Library stands for "Basic mathematical Library", andâ€“NNNN represents a four digit unique number.â€¢ Requirementjustificationorrationale: Tracetothereasonfortheexistenceoftherequire-ment. ThisisusuallyoneormultiplerequirementsfromtheE1356-GTD-TR-01[RD07],orthe Statement of Work (Statement of Work).â€¢ Requirement validation method: T (Test), A (Analysis), I (Inspection), D (Demonstration),R (Review of design).â€¢ A requirement may contain one or multiple remarks that are non normative. Remarksbegin with [SEP]â€¢ All requirements end with the following marker: [END]
â€¢ Thespecialcasestableneverbelongtoasinglerequirementbuttotheprocedureasawhole,theyaremeanttobettervisualizeallspecialcasesoftheprocedureandarenonnormative.InadditiontothedefinitionsandabbreviationsdefinedinÂ§3,thisSoftware Requirements Specicationfollowstheseconventi-ons:â€¢ Not a Number (Not a Number) floating-point datums are represented with:Not a Numberâ€¢ Infinite floating-point numbers are represented with: Infâ€¢ Numeric values are represented in normal font: e.g. +1.0â€¢ Mathematical expressions and constants are represented in cursive1: e.g.x< 0,Ï€,e, &c.â€¢ Programming language related elements are represented in typewriter font: e.g. doublesin(double x)1This statement is not exactly true. Mathematical expressions are represented in a combination of cursive andnormal font; for example the arccosine function is represented as " arccosx", where the arccosfunction name isrepresented in normal font and the xfunction argument in cursive.     â€¢ Constants defined in a programming language are represented in typewriter font: e.g.M_PI,M_E,FLT_MAX , &c.â€¢ Literalnumericvaluesinaprogramminglanguagearerepresentedintypewriterfont: e.g.1.0fThus, this Software Requirements Specication will define requirements for procedures likesin(x)that evaluates the mathe-matical function sinx, and the mathematical transcendental constant Ï€, which cannot be repre-sented accurately in this text, is approximated in programming languages like C with constantssuch asM_PI(which have a finite precision value assigned like 3.14159265358979323846 ).Regarding the validation methods of the requirements we define them as follows:â€¢Test - Validated via Software Validation Specification (Software Validation Specication) testing,â€¢Analysis - Validated via manual analysis effort.â€¢Inspection - Validated via source code inspection.â€¢Demonstration - Validated via one-time display of an example execution.â€¢Review of design - Validated via review of the Software Design Document (Software Design Document).5.2 FunctionalRequirementsThis Software Requirements Specication describes the capabilities to be provided by the basic mathematical library. The Basic Library shall implement the following procedures of the ISO C99 standard [RD03] :sin Procedure returning the trigonometric sineasin Procedure returning the trigonometric arcsinecos Procedure returning the trigonometric cosineacos Procedure returning the trigonometric arccosinetan Procedure returning the trigonometric tangentatan Procedure returning the trigonometric arctangentsqrt Procedure returning the square rootatan2 Procedure returning the trigonometric arctangentofy/xexp Procedure returning the base Eexponential of xpow Procedure returning xraised to the power of ylog Procedure returning the natural logarithmlog10 Procedure returning the base 10 logarithmfabs Procedure returning the absolute value     round Procedure for rounding to the nearest integer(Halfway values rounded away from 0)floor Procedure for rounding downwards to the nearestintegertrunc Procedure for rounding towards 0 to the nearestintegerceil Procedure for rounding upwards to the nearestintegerfmod Procedure returning the floating-point remainderofx/ymodf Procedure breaking xin its integral and fractionalpartfmin Procedure returning the smaller of two valuesfmax Procedure returning the larger of two valueshypot Procedure returning the square root of x2+y2isfinite Procedure returning whether the value of theargument is finite or not (not Â±Infand not Not a Number)isinf Procedure returning whether the value of theargument is positive or negative Infinity or notisnan Procedure returning whether the argument is anot-a-number (Not a Number) floating-point value or notsignbit Procedure returning whether the argument isnegative or notcopysign Procedure returning a floating-point number withthe magnitude ofxand the sign of y[SEP] The description of these procedures are not to be understood as the requirementsandspecificationoftheproceduresbutasadescriptionforidentificationpurposes. Fortheexactspecification of the procedure refer to the ISO C99 standard. [END]
 The Basic Library shall implement the following additional procedures:deg2rad Procedure returning the radians value of a provided degree valuerem2pi Procedure returning the provided value reduced to the range [+0,2Ï€][SEP]Thedescriptionoftheseproceduresarenottobeunderstoodastherequirementsandspecification of the procedures but as a description for identification purposes. [END]
      The Basic Library shall provide procedures for 32 bit (binary32) and 64 bit (binary64) precisionfloating-point datums.[SEP]ThisreferstotheISOC99procedureswith32bitfloating-pointargumentsandreturnvalues and the procedures with 64 bit floating-point arguments and return values (e.g. floatsinf(float x) and double sin(double x) ).[END]
 The Basic Library shall provide the following constants:M_E Value ofeM_LOG2E Value oflog10eM_LOG10E Value oflog2eM_LN2 Value ofloge2M_LN10 Value ofloge10M_PI Value ofÏ€M_PI_2 Value ofÏ€2M_PI_4 Value ofÏ€4M_1_PI Value of1Ï€M_2_PI Value of2Ï€M_2_SQRTPI Value of2âˆšÏ€M_SQRT2 Value ofâˆš2M_SQRT1_2 Value of/radicalBig12HUGE_VAL Value of +Inf(double)HUGE_VALF Value of +Inf(float)INFINITY Value of +InfNAN Value of Not a NumberMAXFLOAT Synonym of FLT_MAX[SEP]Both INFINITY andNANexpand to floats or doubles depending on the context. [END]
 TheBasicLibraryshallconsiderallargumentsandreturnvaluesthatrepresentanangletobeinradians unless otherwise specified. [END]
 AngleDegreetoRadiansConversion Thedeg2rad anddeg2radf proceduresshallreturntheradiansvalueequaltotheargument xgiven in degrees. [END]
 Thedeg2rad anddeg2radf procedures shall return Not a Numberif the argument is Not a Number.[END]
 Thedeg2rad anddeg2radf proceduresshallreturnthevalueoftheargumentiftheargumentisÂ±0orÂ±Inf.[END]
Â±0XÂ±InfXNot a NumberNot a Number 5.5: Special cases for deg2rad(X)[END]
 AngleRangeReduction The rem2piand rem2pif procedures shall return the positive remainder of the argument xn-times divided by the value 2Ï€such that:+0â‰¤xâˆ’nâˆ—2Ï€â‰¤2Ï€[SEP]The target range is [+0,+2Ï€].ncan be a positive or negative integer. [END]
 Therem2piandrem2pif procedures shall return Not a Numberif the argument is Not a Number.[END]
 Therem2piandrem2pif proceduresshallreturnthevalueoftheargumentiftheargumentisÂ±0.[END]
 Therem2piandrem2pif procedures shall return Not a Numberif the argument is Â±Inf.[END]
     Â±0XÂ±InfNot a NumberNot a NumberNot a Number 5.6: Special cases for rem2pi(X)[END]
 SIN( sinx) Thesinandsinfprocedures shall evaluate the sineof their argument xin radians. [END]
 Thesinandsinfprocedures shall use a minimax polynomial for the calculation. [END]
 Thesinandsinfprocedures shall return Not a Numberif the argument is Not a Number.[END]
 Thesinandsinfprocedures shall return the value of the argument if the argument is Â±0.[END]
 Thesinandsinfprocedures shall return Not a Number if xisÂ±Inf.[END]
Â±0XÂ±InfNot a NumberNot a NumberNot a Number 5.7: Special cases for sin(X)[END]
 ASIN( arcsinx) The asinandasinfprocedures shall evaluate the arcsine of their argument xin the outputrange [-Ï€2,Ï€2] radians. [END]
 Theasinandasinfprocedures shall use a rational approximation for the calculation. [END]
      Theasinandasinfprocedures shall return Not a Numberif the argument is Not a Number.[END]
 Theasinandasinfproceduresshallreturnthevalueoftheargumentiftheargumentis Â±0.[END]
 Theasinandasinfprocedures shall return Not a Numberif the argument is Â±Inf.[END]
 Theasinandasinfprocedures shall return Not a Numberif the argument is not in the range [-1, 1]. [END]
Â±0X/âˆˆ[-1,1]Not a NumberÂ±InfNot a NumberNot a NumberNot a Number 5.8: Special cases for asin(X)[END]
 COperating System( cosx) Thecosandcosfprocedures shall evaluate the cosineof their argument xin radians. [END]
 Thecosandcosfprocedures shall use a minimax polynomial for the calculation. [END]
 Thecosandcosfprocedures shall return Not a Numberif the argument is Not a Number.[END]
 Thecosandcosfprocedures shall return 1.0if the argument is Â±0.[END]
 Thecosandcosfprocedures shall return Not a Number, if the argument is Â±Inf.[END]
     Â±01.0Â±InfNot a NumberNot a NumberNot a Number 5.9: Special cases for cos(X)[END]
 ACOperating System( arccosx) The acosandacosfprocedures shall evaluate the principal value of the arccosine of their ar-gument xin the output range [0, Ï€] radians. [END]
 Theacosandacosfprocedures shall use a rational approximation for the calculation. [END]
 Theacosandacosfproceduresshallreturn Not a Number,iftheargument xisnotintherange[-1,1]. [END]
 Theacosandacosfprocedures shall return Not a Numberif the argument is Not a Number.[END]
 Theacosandacosfprocedures shall return +0if the argument is +1.[END]
 Theacosandacosfprocedures shall return Not a Numberif the argument xisÂ±Inf.[END]
+1+0/âˆˆ[-1,1]Not a NumberÂ±InfNot a NumberNot a NumberNot a Number [END]
: Special cases for acos(X)     [END]
 TAN( tanx) Thetanandtanfprocedures shall evaluate the tangent of their argument xin radians. [END]
 Thetanandtanfprocedures shall use a minimax polynomial for the calculation. [END]
 Thetanandtanfprocedures shall return Not a Numberif the argument is Not a Number.[END]
 Thetanandtanfprocedures shall return the value of the argument if the argument is Â±0.[END]
 Thetanandtanfprocedures shall return Not a Number, if the argument is Â±Inf.[END]
Â±0XÂ±InfNot a NumberNot a NumberNot a Number [END]
: Special cases for tan(X)[END]
 ATAN( arctanx) Theatanandatanfproceduresshallcalculatethearctangentoftheirargument xintheoutputrange [-Ï€2,Ï€2] radians. [END]
 Theatanandatanfprocedures shall use a minimax polynomial for the calculation. [END]
 Theatanandatanfprocedures shall return Not a Numberif the argument is Not a Number.[END]
 Theatanandatanfprocedures shall return the argument if the argument is Â±0.[END]
      Theatanandatanfprocedures shall return Â±Ï€2if the argument is Â±Inf.[END]
Â±0X-Inf-Ï€2+Inf+Ï€2Not a NumberNot a Number [END]
: Special cases for atan(X)[END]
 ATAN2( arctany/x) The atan2andatan2fprocedures shall calculate the arctangent of the division y/xof theirarguments xandyin the output range [- Ï€,Ï€] radians. [END]
 Theatan2andatan2fprocedures shall use atanandatanfprocedures. [END]
 The atan2andatan2fprocedures shall return Â± Ï€, if the argument yisÂ±0and the argumentx< 0.[END]
 The atan2andatan2fprocedures shall return Â±0, if the argument yisÂ±0and the argumentx> 0.[END]
 Theatan2andatan2fproceduresshallreturn-Ï€2,iftheargument yis<0andtheargument xisÂ±0.[END]
 The atan2andatan2fprocedures shall returnÏ€2, if the argument yis > 0 and the argument xi sÂ±0 .[END]
 Theatan2andatan2fprocedures shall return Not a Numberif any argument is Not a Number.[END]
      Theatan2andatan2fproceduresshallreturnÂ± Ï€,iftheargument yisÂ±0andtheargument xis -0.[END]
 Theatan2andatan2fproceduresshallreturn Â±0,iftheargument yisÂ±0andtheargument xis +0.[END]
 The atan2andatan2fprocedures shall return Â± Ï€, if the argument Â± yis finite and not 0, andthe argument xis-Inf.[END]
 The atan2andatan2fprocedures shall return Â±0, if the argument Â± yis finite and not 0, andthe argument xis+Inf.[END]
 Theatan2andatan2fproceduresshallreturnÂ±Ï€2,iftheargument yisÂ±Infandtheargumentxhas a finite value. [END]
 Theatan2andatan2fproceduresshallreturnÂ±3Ï€4,iftheargument yisÂ±Infandtheargumentxis-Inf.[END]
 Theatan2andatan2fproceduresshallreturnÂ±Ï€4,iftheargument yisÂ±Infandtheargumentxis+Inf.[END]
<0 -0 -Ï€<0+0 +Ï€-0-0 -Ï€-0+0 +Ï€Â±0<0 -Ï€2Â±0>0 +Ï€2+0 -0 -0+0+0 +0>0 -0 -0     >0+0 +0-Inf<0âˆ§/negationslash=-Inf-Ï€-Inf>0âˆ§/negationslash=+Inf+Ï€+Inf<0âˆ§/negationslash=-Inf-0+Inf>0âˆ§/negationslash=+Inf+0/negationslash=Â±Inf-Inf -Ï€2/negationslash=Â±Inf+Inf +Ï€2-Inf-Inf -3Ï€4-Inf+Inf +3Ï€4+Inf -Inf -Ï€4+Inf+Inf +Ï€4Not a Number AnyNot a NumberAnyNot a Number Not a Number [END]
: Special cases for atan2(Y, X)[END]
0 SQRT(âˆšx) Thesqrtandsqrtfprocedures shall calculate the square root of their argument x.[END]
 Thesqrtandsqrtfprocedures shall return Not a Number, if the argument x< -0.[END]
 Thesqrtandsqrtfprocedures shall return Not a Numberif the argument xisNot a Number.[END]
 Thesqrtandsqrtfprocedures shall return the argument if the argument xisÂ±0or+Inf.[END]
 Thesqrtandsqrtfprocedures shall return Not a Number, if the argument xis-Inf.[END]
<-0Not a NumberÂ±0X-InfNot a Number     +Inf+InfNot a NumberNot a Number [END]
: Special cases for sqrt(X)[END]
1 EXP( ex) The expandexpfprocedures shall calculate the base eexponential value of their argument x.[END]
 Theexpandexpfprocedures shall use a minimax polynomial for the calculation. [END]
 Theexpandexpfprocedures shall return Not a Numberif the argument xisNot a Number.[END]
 Theexpandexpfprocedures shall return 1 if the argument xisÂ±0.[END]
 Theexpandexpfprocedures shall return +0 if the argument xis-Inf.[END]
 Theexpandexpfprocedures shall return the argument if the argument xis+Inf.[END]
Â±0+1-Inf+0+Inf+InfNot a NumberNot a Number [END]
: Special cases for exp(X)     [END]
2 POW( xy) The powandpowfprocedures shall calculate the value of their argument xraised to the powerofy.[END]
 Thepowandpowfprocedures shall use a binary logarithm for the calculation. [END]
 The powand powfprocedures shall return Not a Numberif the argument xis < 0 and finite, and theargument yis a finite, non-integer value. [END]
 Thepowandpowfprocedures shall returnâ€¢Â±Infrespectively if yis an odd integer, orâ€¢+Infifyis not an odd integerif the argument yis < 0 and xisÂ±0.[END]
 Thepowandpowfprocedures shall return Not a Numberifâ€¢ the argument yisNot a Numberandxis not 1, orâ€¢ the argument xisNot a Numberandyis not Â±0.[END]
 The powand powfproceduresshallreturn Â±0respectively,iftheargument xisÂ±0andtheargu-ment yis an odd integer > 0. [END]
 The powand powfprocedures shall return +0, if the argument xisÂ±0and the argument yi s>0and not an odd integer. [END]
 The powand powfprocedures shall return 1.0if the argument xis+1.[END]
 The powand powfprocedures shall return 1.0if the argument yisÂ±0.[END]
      The powand powfprocedures shall return 1.0if the argument xis-1, and the argument yisÂ±Inf.[END]
 The powand powfprocedures shall return +Infif|x|<1and the argument yis-Inf.[END]
 The powand powfprocedures shall return +0,i f|x|>1and the argument yis-Inf.[END]
 The powand powfprocedures shall return +0,i f|x|<1and the argument yis+Inf.[END]
 The powand powfprocedures shall return +Inf,i f|x|>1and the argument yis+Inf.[END]
 The powand powfprocedures shall return -0, if the argument xis-Infand the argument yisan odd integer < 0. [END]
 The powand powfproceduresshallreturn+0,iftheargument xis-Infandtheargument yis<0 and not an odd integer. [END]
 The powand powfproceduresshallreturn -Inf,iftheargument xis-Infandtheargument yisan odd integer > 0. [END]
 The powand powfproceduresshallreturn +Inf,iftheargument xis-Infandtheargument yis> 0 and not an odd integer. [END]
 The powand powfproceduresshallreturn+0,iftheargument xis+Infandtheargument y<0.[END]
      The powand powfproceduresshallreturn +Inf,iftheargument xis+Infandtheargument y>0.[END]
<0 /âˆˆZ Not a Number-0 {2k+1:kâˆˆZ<0}-Inf-0âˆˆR<0\{2k+1:kâˆˆZ}+Inf+0 <0 +InfÂ±0 {2kâˆ’1:kâˆˆZ>0}XÂ±0âˆˆR>0\{2kâˆ’1:kâˆˆZ}+0+1 Any 1.0Any Â±0 1.0-1 Â±Inf 1.0âˆˆ]-1,1[ -Inf +Inf/âˆˆ[-1,1] -Inf +0âˆˆ]-1,1[ +Inf +0/âˆˆ[-1,1] +Inf +Inf-Inf {2k+1:kâˆˆZ<0}-0-InfâˆˆR<0\{2k+1:kâˆˆZ}+0-Inf {2kâˆ’1:kâˆˆZ>0}-Inf-InfâˆˆR>0\{2kâˆ’1:kâˆˆZ}+Inf+Inf <0 +0+Inf >0 +InfNot a Number /negationslash=Â±0 Not a Number/negationslash=1 Not a Number Not a Number [END]
: Special cases for pow(X, Y)[END]
3 LOG( lnx) The logand logfprocedures shall calculate the natural logarithm of their argument x.[END]
 The logand logfprocedures shall return -Infif the argument xisÂ±0.[END]
      The logand logfprocedures shall return Not a Numberif the argument xis finite and less than 0 or xis-Inf.[END]
 The logand logfprocedures shall return Not a Number, if the argument xisNot a Number.[END]
 The logand logfprocedures shall return +0, if the argument xis 1.[END]
 The logand logfprocedures shall return +Inf, if the argument xis+Inf.[END]
<0Not a NumberÂ±0-Inf1+0+Inf+InfNot a NumberNot a Number [END]
: Special cases for log(X)[END]
4 LOG10( log10x) The log10and log10fprocedures shall calculate the base 10 logarithm of their argument x.[END]
 The log10and log10fprocedures shall return -Infif the argument xisÂ±0.[END]
 The log10and log10fproceduresshallreturn Not a Numberiftheargument xisfiniteandlessthan0orxi s-Inf.[END]
 The log10and log10fprocedures shall return Not a Number, if the argument xisNot a Number.[END]
      The log10and log10fprocedures shall return +0, if the argument xis 1.[END]
 The log10and log10fprocedures shall return +Inf, if the argument xis+Inf.[END]
<0Not a NumberÂ±0-Inf1+0+Inf+InfNot a NumberNot a Number [END]
: Special cases for log10(X)[END]
5 FABS( |x|) The fabsand fabsfprocedures shall calculate the absolute values of their argument x.[END]
 The fabsand fabsfprocedures shall return Not a Number, if the argument xisNot a Number.[END]
 The fabsand fabsfprocedures shall return +0, if the argument xisÂ±0.[END]
 The fabsand fabsfprocedures shall return +Inf, if the argument xisÂ±Inf.[END]
Â±0+0Â±Inf+InfNot a NumberNot a Number [END]
: Special cases for fabs(X)     [END]
6 ROUND( âŒŠx+0.5âŒ‹,x/greaterorequalslant0;âŒˆxâˆ’0.5âŒ‰,x< 0) The roundand roundfprocedures shall round their argument xto the nearest integer value,rounding halfway cases away from zero. [END]
 The roundand roundfprocedures shall return Not a Number, if the argument xisNot a Number.[END]
 The roundand roundfprocedures shall return the argument, if the argument xisÂ±0orÂ±Inf.[END]
Â±0XÂ±InfXNot a NumberNot a Number [END]
: Special cases for round(X)[END]
7 FLOOR( âŒŠxâŒ‹) The floorand floorfproceduresshallcalculatethelargestintegralvaluenotgreaterthantheirargument x.[END]
 The floorand floorfprocedures shall return Not a Number, if the argument xisNot a Number.[END]
 The floorand floorfprocedures shall return the argument, if the argument xisÂ±0orÂ±Inf.[END]
Â±0XÂ±InfXNot a NumberNot a Number [END]
: Special cases for floor(X)     [END]
8 TRUNC( âŒŠxâŒ‹,x/greaterorequalslant0;âŒˆxâŒ‰,x< 0) The truncand truncfprocedures shall round their argument xto the integer value nearest tobut no larger in magnitude than the argument. [END]
 The truncand truncfprocedures shall return Not a Number, if the argument xisNot a Number.[END]
 The truncand truncfprocedures shall return the argument, if the argument xisÂ±0orÂ±Inf.[END]
Â±0XÂ±InfXNot a NumberNot a Number [END]
: Special cases for trunc(X)[END]
9 CEIL( âŒˆxâŒ‰) The ceiland ceilfproceduresshallcomputethesmallestintegralvaluenotlessthanargumentx.[END]
 The ceiland ceilfprocedures shall return Not a Number, if the argument xisNot a Number.[END]
 The ceiland ceilfprocedures shall return the argument, if the argument xisÂ±0orÂ±Inf.[END]
Â±0XÂ±InfXNot a NumberNot a Number [END]
: Special cases for ceil(X)     [END]
0 FMOD( xmody) The fmodand fmodfprocedures shall calculate the floating-point remainder of the division ofthe argument xby the argument y.[SEP]ThesignoftheremainderisdefinedbytheISOC99standardasthesignofthedividend(argument x). Therefore an argument y< 0 produces the same result as itâ€™s absolute value.Example: Input of x = 3.456 an dy=- 2results in a return value of 1.456. [END]
 The fmodand fmodfprocedures shall return Not a Number, if any argument is Not a Number.[END]
 The fmodand fmodfprocedures shall return Not a Number, if the argument yis 0.[END]
 The fmodand fmodfprocedures shall return Not a Number, if the argument xis Â±Inf. [END]
 The fmodand fmodfprocedures shall return Â±0, if the argument xisÂ±0and the argument yisnot zero. [END]
 The fmodand fmodfprocedures shall return the argument x, if the argument xis not Â±Inf andthe argument yisÂ±Inf.[END]
AnyÂ±0Not a NumberÂ±InfAnyNot a NumberÂ±0/negationslash=Â±0X/negationslash=Â±InfÂ±InfXNot a NumberAnyNot a NumberAnyNot a NumberNot a Number [END]
: Special cases for fmod(X, Y)     [END]
1 MODF The modfand modffprocedures shall compute the integral and fractional part of the argumentx.[SEP]ThesignofboththeintegralandfractionalpartisdefinedbytheISOC99standardasthe sign of the argument x.Example: Inputofx=-3.456resultsinareturnvalueof-0.456andsetsthevaluepointedtobythe argument âˆ—iptrto -3.0. [END]
 The modfand modffprocedures shall return the fractional part of the argument xand write theintegral part of the argument xto the pointer provided by the argument âˆ—iptr.[END]
 The modfand modffproceduresshallreturn Not a Numberandsettheargument âˆ—iptrtoNot a Number,iftheargu-ment xisNot a Number.[END]
 The modfand modffproceduresshallreturn Â±0andsettheargument âˆ—iptrtoÂ±Inf,iftheargu-ment xisÂ±Inf.[END]
-Inf-Inf-0+Inf+Inf+0Not a NumberNot a NumberNot a Number [END]
: Special cases for modf(X, âˆ—iptr)[END]
2 FMIN( min(x,y)) The fminand fminfproceduresshalldeterminetheminimumnumericvalueoftheargument xand y.[SEP]This includes Â±Inf, with -Infbeing lesser than any other numeric value and +Infbeing greater than any other numeric value. [END]
 The fminand fminfprocedures shall return Not a Number, if the arguments xand yareNot a Number.[END]
      The fminand fminfproceduresshallreturntheoneargumentifonlytheotherargumentis Not a Number.[END]
 The fminand fminfprocedures shall return the y argument if both arguments are zero. [END]
-0-0-0-0+0+0+0-0-0+0+0+0Not a Number/negationslash=Not a NumberY/negationslash=Not a NumberNot a NumberXNot a NumberNot a NumberNot a Number [END]
: Special cases for fmin(X, Y)[END]
3 Fused Multiply-AddX( max (x,y)) The fmaxand fmaxfproceduresshalldeterminethemaximumnumericvalueoftheargument xand y.[SEP]This includes Â±Inf, with -Infbeing lesser than any other numeric value and +Infbeing greater than any other numeric value. [END]
 The fmaxand fmaxfprocedures shall return Not a Number, if the arguments xand yareNot a Number.[END]
 The fmaxand fmaxfproceduresshallreturntheoneargumentifonlytheotherargumentis Not a Number.[END]
 The fmaxand fmaxfprocedures shall return the y argument if both arguments are zero. [END]
-0-0-0-0+0+0     +0-0-0+0+0+0Not a Number/negationslash=Not a NumberY/negationslash=Not a NumberNot a NumberXNot a NumberNot a NumberNot a Number [END]
: Special cases for fmax(X, Y)[END]
4 HYPOT(/radicalbigx2+y2) The hypotand hypotfprocedures shall compute the length of the hypotenuse of a rightangledtriangle with sides of length xand y.[END]
 The hypotand hypotfprocedures shall return +Inf, if one of the arguments xoryisÂ±Inf.[END]
 The hypotand hypotfprocedures shall return Not a Number, if one of the arguments xoryisNot a Numberandthe other is not Â±Inf.[END]
AnyÂ±Inf+InfÂ±InfAny+InfNot a Number/negationslash=Â±InfNot a Number/negationslash=Â±InfNot a NumberNot a Number [END]
: Special cases for hypot(X, Y)[END]
5 ISFINITE The isfinite procedureshallreturnanon-zerovalueiftheargument xhasafinitevalueandisneither Not a NumbernorÂ±Inf.[END]
6 ISINF The isinfprocedure shall return a non-zero value if and only if the argument xisÂ±Inf.[END]
7 ISNAN The isnanprocedure shall return a non-zero value if and only if the argument xisNot a Number.[END]
8 SIGNBIT The signbit procedure shall return a non-zero value if and only if the argument xis negative.[END]
9 COPYSIGN( |x|Â·sgny) The copysign and copysignf procedures shall compute a new number with the magnitude ofthe argument xand the the sign of y.[SEP]This includes Not a Numbervalues for argument y, as Not a Numbervalues have a sign just as any othervalue.[END]
 The copysign and copysignf procedures shall return Not a Numberif the argument xisNot a Number.[END]
Not a NumberAnyNot a Number [END]
: Special cases for copysign(X, Y)5.3 PerformanceRequirements The execution time of all procedures shall be bounded. [END]
 Theexecutiontimeofallproceduresshallbecharacterizablewithinsubdomainswhichcoverthecomplete domain of the procedure.[SEP]Forexamplethesinprocedurecanbesplitintothesubdomains( -Inf,âˆ’2âˆ’27],(âˆ’2âˆ’27,+2âˆ’27)and[ +2âˆ’27,+Inf),figure5.1showsaplotoftheexecutiontimeofsineforpositiveargu-ments. [END]
      5.1: Execution time of sine for positive arguments The Worst Case Execution Time (WCET) of the procedures shall not deviate by more than 30%from the median execution times of the characterized ranges.[SEP]The median shall be defined with random arguments within the range. [END]
 The Basic mathematical Library procedure results shall differ from theoretical results by less than 0.5 Units in the LastPlace (Unit in the Last Places). [END]
5.4 InterfaceRequirementsTherequirementregardingcompliancetothedefinitionsinmath.hoftheISOC99standard [RD03] can be found in Â§5.9. [END]
 The Basic Library shall be compliant to IEEE 754-2008. [END]
 The Basic Library shall be compatible with code auto-generated with Matlab R2016a SimulinkCoder.[SEP]The auto-generated code will require an include of mlfs.h.[SEP]All C definition and function signatures not present in mlfs.hneed to be providedby the user. He will then have to link his own libm after linking with the Mathematical Library for Flight Software. [END]
      TheBasicLibraryshallprovidebestpracticeswithintheSoftwareUserManual(Software User Manual)toproduceAda wrappers to enable the use of the library from Ada83 and Ada95. [END]
 TheBasicLibraryshallprovidebestpracticeswithintheSoftware User ManualtoproduceC-MEXfunctionwrap-pers, to enable the use of the Basic Library in Matlab and Simulink Matlab function blocks. [END]
 The Basic Library shall provide best practices within the Software User Manual to produce S-function wrappers,to enable the use of the Basic Library in Simulink. [END]
5.5 OperationalRequirementsNot applicable.5.6 ResourcesRequirements The Basic Library shall run on x86-64 and SPARC V8 processor architectures. [END]
 The Basic Library shall contribute less than 100kB to the size of the final On-Board Software executable. [END]
5.7 DesignRequirementsandImplementationConstraints FortheBasicLibraryitshallbeselectableforwhichprocessorarchitectureitwillbecompiled. [END]
 For the Basic Library it shall be configurable which procedures of the library will be included inthe linking step. [END]
 The Basic Library procedures shall be reentrant and thread-safe. [END]
      TheBasicLibrarydesignshalldefinethebehavioroftheproceduresinatabularformat,presen-ting the parameter domain decomposition and the corresponding output. [END]
 The Basic Library design shall justify every modification to be carried out on the reused library.[END]
5.8 SecurityandPrivacyRequirementsNot applicable.5.9 PortabilityRequirements The Basic Library shall be implemented in ISO C99. [END]
 The Basic Library shall be compliant to the math.h definitions as per ISO C99 standard [RD03] .[END]
 The Basic Library shall not provide error handling with the errnoglobal variable.[SEP]Allproceduresthatwouldhaveproducedanerrorwillinsteadreturnadefinedvalue(see requirements for special cases), often Not a Number.[END]
 The Basic Library shall be compileable with GNU C Compiler version 4.2.1 with Binutils version 2.18. [END]
 The Basic Library shall be compatible to Real-Time Executive for Multiprocessor Systems Operating System version 4.8 distributed by Edisoft. [END]
 TheBasicLibraryshallnotuseFloatingPointUnit(Floating Point Unit)builtinfunctionsforelementarymathfunction evaluation. [END]
      The Basic Library shall not rely on the presence of the Fused Multiply-Add (Fused Multiply-Add) operation foralgorithm optimization. [END]
 TheBasicLibraryshallbeabletoconverttoamodusthatmirrorstheFloating Point Unitâ€™sbehaviourregardingsubnormal numbers in case the Floating Point Unit does not handle subnormal numbers the same as normalnumbers.[SEP]For example the Floating Point Unit may simply throw a trap, or have the possibility to be set toDenormals are Zero (Denormals are Zero) and Flush to Zero (Flush to Zero) behaviour. In both cases the library shallbehave the same way as the Floating Point Unit does. [END]
 SoftwareQualityRequirements The Basic Library source shall be compliant to the mandatory and required rules depicted inMISRA C:2012 [RD06] . [END]
 The Basic Library shall provide a justification for not respected required rules in MISRA C:2012[RD06] . [END]
 The Basic Library shall comply to the mandatory metrics provided by European Cooperation for Space Standardization-HB-Q-80 [RD05]with their proposed targets. [END]
 The Basic Library shall comply to the following project depending mandatory metrics proposedby European Cooperation for Space Standardization-HB-Q-80 [RD05] :Statement Coverage (Source Code) 1Modified Condition and Decision Coverage (Source Code) 1Reuse modification rate 0.3Code size stability 1.3Requirement stability 0.3[END]
      TheBasicLibrary shallcomplytorequired metricâ€˜Userdocumentationcompletenessâ€™ proposedby European Cooperation for Space Standardization-HB-Q-80 [RD05] with their proposed targets. [END]
 SoftwareReliabilityRequirements TheBasicLibraryshallreturntheexactsamevaluewheneveraprocedureiscalledmultipletimeswith the same argument(s). [END]
 SoftwareMaintainabilityRequirementsUpholdingtherequirementslistedin[END]
shouldproduceamaintainablesoftware. Noadditionalmaintainability requirements specified.[END]
 SoftwareSafetyRequirements The Basic Library shall never cause either CPU or Floating Point Unit to stop. [END]
 SoftwareConfigurationandDeliveryRequirements The Basic Library source shall be delivered as a collection of C source files.[SEP]There will be neither a binary nor an executable delivered. [END]
 The Basic Library shall be delivered with a GNU Make makefile and associated scripts to confi-gure, build and install the Basic Library. [END]
 //Statement of WorkÂ§3.5Each modified or newly created file, be it source or documentation, of the Basic Library shallcontain a header including the European Space Agency copyright notice: 20xx[SEP]xx corresponds to the applicable year. [END]
 DataDefinitionandDatabaserequirements The Basic Library shall use 32bit and 64bit IEEE 754 [RD01] floating-point datums as well as32bit integers to exchange data. [END]
 HumanFactorsRelatedRequirementsNot applicable.[END]
 AdaptationandInstallationRequirementsThe Basic Library can be installed using a GNU Make makefile, see  in [END]
.   [END]
