The Boot software shall support the following modes: -Nominal Sequence Mode, where the Processor Module function loads an Application Software image. -Standby Mode. -Monitor Mode, where the Processor Module function is controlled from a dedicated Electrical Ground Support Equipment I/F.[END]
The Boot Software shall be executed on processor reset (power-o n reset, Software reset, error reset, watchdog reset).[END]
The Fast Boot Path selection sh all be based on configuration data that are set prior to the Processor Module reset/Processor Module power-on. [END]
When Fast Boot Path is not selected, the Boot Software Nomina l Sequence shall execute as minimum the following steps: 1. Perform processor mo dule initialisations;2. Perform processor module Self-Tests;3. Select the active Application Software image;4. Test integrity of the selected Application Software image in Application storage memory;5. Copy the selected Application Software Image from Ap plication storage me mory to processorworking memory;6. Test integrity of the selected AS W image in processor working memory;7. Execute the selected Application Software in processor working memory.[END]
When Fast Boot Path is select ed, the Boot Software Fast Sequence  shall execute a subset of the step of the nominal sequence. [END]
The Boot Software shall be able to  select the active Application Software Image based on configuration data that are set prior to the processor module reset/power-on. [END]
The Boot Software active Application Software image selection configuration data shall be controllable by direct Telecommand from ground or by the Reconfiguration function. [END]
The Boot Software shall execute the steps of the Nominal Sequence also in case of failure in the Self-Tests. [END]
The Boot Software shall support the following capa bility in flight, by  means of separate equipment supporting the space-ground communication ( Standby ): xto load, dump and check processor memories;xto load, dump and check registers;xto read the local Boot Report.[END]
The Boot Software Standby function shall access only resources local to the processor module without interfering with the nominal spacecraft operations managed by the active Processor Module. [END]
The Boot Software Standby function shall be triggered by the logical AND of two independent conditions. [END]
The Boot Software Standby  activation condition shall be checked within the Boot Software Nominal Sequence. [END]
The Boot Software shall activate the Standby function based on conditions controlled by Ground. [END]
If activated after the Self-Tests, the Boot Software StandBy function shall be executed also in case of failure in the Self-Tests. [END]
The Boot Software shall support the capability to load and dump memories and registers, start and halt software execution, and re set the Processor Module on Ground command ( Monitor ). [END]
The Boot Software Monitor function shall be triggered by th e logical AND of two independent conditions. [END]
The Boot Software Monitor activation condition shall be ch ecked within the Boot Software Nominal Sequence. [END]
The Boot Software shall activate the Monitor  function based on conditions being true only in Ground configuration. [END]
If activated after the Self-Tests, the Boot Software Monitor function shall be executed also in case of failure in the Self-Tests. [END]
The Boot Software shall initialise In teger Unit processor registers. [END]
The Boot Software shall initialise Floati ng Point Unit processor registers. [END]
The Boot Software shall initialise th e registers of the On-Chip device s that are used by the Boot Software. [END]
The Boot Software shall disable the On-Chip devi ces that are not used by the Boot Software. [END]
The Boot Software shall init ialise Memory Management Unit registers. [END]
The Boot Software shall register trap specific handlers for each of the following trap sources: xresetxdata_store_errorxinstruction_access_Memory Management Unit_missxinstruction_access_errorxr_register_access_errorxinstruction_access_exceptionxprivileged_instructionxillegal_instructionxfp_disabledxcp_disabledxunimplemented_FLUSHxwatchpoint_detectedxwindow_overflowxwindow_underflowxmem_address_not_alignedxfp_exceptionxcp_exceptionxdata_access_errorxdata_access_Memory Management Unit_missxdata_access_exceptionxtag_overflowxdivision_by_zero[END]
The Boot Software shall register trap specific hand lers for each of the trap sources related to error conditions.  [END]
The Boot Software shall register de fault handlers for every trap source where a specific handler is not defined. [END]
The Boot Software shall disable memory Error Detection And Correction at start-up. [END]
The Boot Software shall disabl e interrupts at start-up. [END]
In case of multi-core processors, only one co re must be responsible for the initialisation sequence. [END]
In case of multi-core processors, secondary core(s) shall be disabl ed (i.e. powered-down) all time during the boot software execution. [END]
The Boot Software shall set the pr ocessor module in a known and consistent configuration before executing the Application Software. [END]
The Boot Software shall test the processor fun ctions supporting Self-Test capabilities. [END]
If Hardware Built-In Test is available, the boot Software shall re port the built in test results in the boot report. [END]
The Boot Software shall test at least the proc essor module devices supporting Self-Test capabilities and used during the execution of Boot Software or Application Software. [END]
The Boot Software shall perform an integrity test (checksum/crc) on the Boot Software image (code and data) stored in processo r module read-only memory. [END]
The Boot Software shall test the processor module  volatile read/write memories to detect functional and manufacturing problems. [END]
It shall be possible to disable the selft est of the processor module volatile memory. [END]
The Boot Software shall perform an integrity test  (checksum/crc) on the Application Software image (code and data) to be copied from Ap plication storage memory to  processor working memory. [END]
The Boot Software shall perform an integrity test  (checksum/crc) on the Application Software image (code and data) in processor working memory after the copy. [END]
The Boot Software shall enable memory Error Detection And Correction duri ng memory and Software image integrity tests. [END]
The Boot Software shall use the same algorithm for all Software image integrity tests. [END]
The Boot Software shall reset to a fixed pre-defined value the co ntent of the processor module volatile read/write memories after the related Self-Tests. [END]
The Boot Software shall enable and use critical pr ocessor module function s independently from the result of the related Self-Tests. [END]
The Boot Software shall enable and use the non-crit ical processor module fun ctions only if the result of the related Self-Test is successful. [END]
The Boot Software shall provide the result of each test in the Boot Report . [END]
The result of the tests (Boot Report) shall be made available in Telemetry. [END]
The Boot Software shall provide a summary of the Boot Report into High Priority Telemetry (High Priority Telemetry Boot Summary). [END]
As a minimum, the summary shall include the fast boot path se lection (enabled/not enabled), the Application Software image selection, and any type  of error detected during Processor Module self-tests. [END]
The Boot Software shall report its progress in  the Boot Report right after each test. [END]
The Boot Software shall report its progress in  the High Priority Telemetry Boot Summary after each test. [END]
In case copies of the same Boot Report are stored in different memory areas, the Boot Software shall keep these aligned during the progress updates. [END]
The Boot Software shall allow chec king the integrity of the Boot Report. [END]
The Boot Software shall allow to store in protected resource (e .g. Safeguard Memory) multiple Boot Report s in compliance with the number of autonomo us reconfiguration sequences foreseen at system level. [END]
The Boot Software shall select the memory slot where to store the Boot Report  in the protected resource (e.g. Safeguard Memory) depending on the last re levant recovery sequence executed by the reconfiguration function. [END]
Boot Software worst case execution time shall be compatible with reconfiguration time system requirements. [END]
The Boot Software shall host an acceptan ce and reporting subservice provider. [END]
The Boot Software shall host an execution reporting subservice provider. [END]
The Boot Software shall host an housek eeping reporting subservice provider. [END]
The Boot Software shall host an event reporting subservice provider. [END]
The Boot Software shall host a memory management service provider. [END]
The Boot Software related memory management service shall contain a raw data memory management subservice. [END]
The raw data memory manageme nt subservice hosted by the Boot Software shall provide the capability to check raw memory data. [END]
The Boot Software shall host a test subservice. [END]
The Boot Software shall host a paramete r management subservice provider. [END]
The parameter management subservice of the B oot Software shall provide the capability to set parameter values. [END]
The Boot Software code and read-only data related to  processor initialisation shall be stored in the processor Boot Memory. [END]
The Boot Software code and read-only data relate d to processor module Self-Tests, integrity tests, Application Software selection/copy/execution and Standby function shall be stored in the processor Boot Memory or Application storage memory. [END]
The Boot Software shall be indepe ndent from the actual values of the Application Software image parameters. [END]
The result of the tests (Boot Report) shall be stored in a predefined area of processor working memory. [END]
The result of the tests (Boot Report) shall be stored in a predefined area of nominal protected resource (e.g . Safeguard Memory). [END]
The result of the tests (Boot Report) shall be stored in a predefined area of redundant protected resource (e.g . Safeguard Memory). [END]
Boot Reports generated by nominal and redundant processors shall not interfere with each other in the protec ted resource (e.g. Safeguard Memory). [END]
The Boot Software shall use a predefined area of working memory and Application storage memory. [END]
The Boot Software shall be independent of an Operating System or run-time system. [END]
The Boot Software shall be designed to use the minimal processor module resources necessary to fulfil the requirements. [END]
The Boot Software (including any Software libraries) shall be compliant to the ECSS-E-ST-40C. [END]
The Boot Software (including any Software libraries) shall be compliant to the ECSS-Q-ST-80C. [END]
The Boot Software shall be developed in complian ce with the applicable coding standards. [END]
The Boot Software (excepted the Monitor function) criticality shall be at least category B. [END]