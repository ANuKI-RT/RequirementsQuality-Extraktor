 Boot software modes The Boot software shall suppo rt the following modes: - Nominal Sequence Mode, where the Processor Module function loads an Application Software image.-S t a n d b y  M o d e .- Monitor Mode, where the Processor Module function is controlled from a dedicated Electrical Ground Support Equipment I/F.[END]
Boot software execution The Boot Software shall be executed on processor reset (power-o n reset, Software reset, error reset, watchdog reset). [END]
Fast Boot Path selection The Fast Boot Path selection sh all be based on configuration data that are set prior to the Processor Module reset/Processor Module power-on. [END]
Boot software nominal sequence When Fast Boot Path is not selected, the Boot Software Nomina l Sequence shall execute as minimum the following steps: 1. Perform processor mo dule initialisations;2. Perform processor module Self-Tests;3. Select the active Application Software image;4. Test integrity of the selected Application Software image in Application storage memory;5. Copy the selected Application Software Image from Ap plication storage me mory to processorworking memory;6. Test integrity of the selected AS W image in processor working memory;7. Execute the selected Application Software in processor working memory.[END]
]. [END]
Fast Boot Path sequence When Fast Boot Path is select ed, the Boot Software Fast Sequence  shall execute a subset of the step of the nominal  sequence. [END]
Active Application Software image selection The Boot Software shall be able to  select the active Application Software Image based on configuration data that are set prior to the processor module reset/power-on. [END]
Active Application Software image selection configuration data The Boot Software active Application Software image selection conf iguration data shall be controllable by direct Telecommand from ground or by  the Reconfiguration function. [END]
 Nominal sequence when failure The Boot Software shall execute the steps of the Nomi nal Sequence also in case of failure in the Self-Tests. [END]
Standby function capability The Boot Software shall support the following capa bility in flight, by  means of separate equipment supporting the space-ground communication ( Standby ): xto load, dump and check processor memories;xto load, dump and check registers;xto read the local Boot Report.[END]
]. [END]
Standby function access The Boot Software Standby  function shall access only resourc es local to the processor module without interfering with the nominal spacec raft operations managed by the active Processor Module. [END]
 Standby function triggering The Boot Software Standby function shall be tri ggered by the logical AND of two independent conditions. [END]
Standby function activation condition The Boot Software Standby  activation condition shall be ch ecked within the Boot Software Nominal Sequence. [END]
 Standby function activation The Boot Software shall activate the Standby  function based on cond itions controlled by Ground. [END]
By function shall be executed also in case of failure in the Self-Tests. [END]
 Monitor function capability The Boot Software shall support the capability to load and dump memories and registers, start and halt software execution, and re set the Processor Module on Ground command ( Monitor ). [END]
Monitor function triggering The Boot Software Monitor  function shall be triggered by th e logical AND of two independent conditions. [END]
Monitor function activation condition The Boot Software Monitor  activation condition shall be ch ecked within the Boot Software Nominal Sequence. [END]
 Monitor function activation The Boot Software shall activate the Monitor  function based on conditions being true only in Ground configuration. [END]
Monitor function when failure If activated after the Self-Tests, the Boot Software Monitor function shall be executed also in case of failure in the Self-Tests. [END]
). The order in which the following initialisations are executed is not strictly imposed. [END]
Initialisation of integer unit The Boot Software shall initialise In teger Unit processor registers. [END]
Initialisation of floating point unit The Boot Software shall initialise Floati ng Point Unit processor registers. [END]
Initialisation of on-chip devices The Boot Software shall initialise th e registers of the On-Chip device s that are used by the Boot Software. [END]
Disabling on-chip devices The Boot Software shall disable the On-Chip devi ces that are not used by the Boot Software. [END]
Initialisation of memory management unit The Boot Software shall init ialise Memory Management Unit registers. [END]
Trap handlers registration The Boot Software shall register trap  specific handlers for each of the following trap sources: xresetxdata_store_errorxinstruction_access_Memory Management Unit_missxinstruction_access_errorxr_register_access_errorxinstruction_access_exceptionxprivileged_instructionxillegal_instructionxfp_disabledxcp_disabledxunimplemented_FLUSHxwatchpoint_detectedxwindow_overflowxwindow_underflowxmem_address_not_alignedxfp_exceptionxcp_exceptionxdata_access_errorxdata_access_Memory Management Unit_missxdata_access_exceptionxtag_overflowxdivision_by_zero[END]
Trap handlers registration when failure The Boot Software shall register trap specific hand lers for each of the trap sources related to error conditions.  [END]
Default handler registration The Boot Software shall register de fault handlers for every trap source where a specific handler is not defined. [END]
Disabling memory Error Detection And Correction The Boot Software shall disable memory Error Detection And Correction at start-up. [END]
Disabling interrupts  The Boot Software shall disabl e interrupts at start-up. [END]
Initialisation by a Single Core In case of multi-core processors, only one co re must be responsible for the initialisation sequence. [END]
Secondary core(s) states In case of multi-core processors, secondary core(s) shall be disabl ed (i.e. powered-down) all time during the boot software execution. [END]
Final configuration The Boot Software shall set the pr ocessor module in a known and consistent configuration before executing the Application Software. [END]
Testing processor functions The Boot Software shall test the processor fun ctions supporting Self-Test capabilities. [END]
Testing processor functions if Hardware Built-In Test is available, the boot Software shall re port the built in test results in the boot report. [END]
Testing processor module devices The Boot Software shall test at least the proc essor module devices supporting Self-Test capabilities and used during the execution of Boot Software or Application Software. [END]
Testing integrity of boot software image The Boot Software shall perform an integrity test (checksum/crc) on the Boot Software image (code and data) stored in processo r module read-only memory. [END]
Testing memory The Boot Software shall test the processor module  volatile read/write memories to detect functional and manufacturing problems. [END]
Disabling memory self-test It shall be possible to disable the self-t est of the processor module volatile memory. [END]
). [END]
Testing integrity of original Application Software image The Boot Software shall perform an integrity test  (checksum/crc) on the Application Software image (code and data) to be copied from Ap plication storage memory to  processor working memory. [END]
Testing integrity of copied Application Software image The Boot Software shall perform an integrity test  (checksum/crc) on the Application Software image (code and data) in processor working memory after the copy. [END]
Enabling memory Error Detection And Correction The Boot Software shall enable memory Error Detection And Correction duri ng memory and Software image integrity tests. [END]
Integrity test algorithms The Boot Software shall use the same algorithm for all Software image integrity tests. [END]
) or integrity tests (ref. Steps 4 and 6 of [END]
). [END]
After test reset The Boot Software shall reset to a fixed pre-defined value the co ntent of the processor module volatile read/write memories after the related Self-Tests. [END]
After test critical processor module use The Boot Software shall enable and use critical pr ocessor module function s independently from the result of the related Self-Tests. [END]
After test non critical processor module use The Boot Software shall enable and use the non-crit ical processor module fun ctions only if the result of the related Self-Test is successful. [END]
Boot report The Boot Software shall provide the result of each test in the Boot Report . [END]
Boot report in telemetry The result of the tests ( Boot Report ) shall be made available in Telemetry. [END]
Boot report summary The Boot Software shall provide a summary of the Boot Report  into High Priority Telemetry (High Priority Telemetry Boot Summary). [END]
Boot report summary content As a minimum, the summary shall include the fast boot path se lection (enabled/not enabled), the Application Software image selection, and any type  of error detected during Processor Module self-tests. [END]
 Flight Computer Initialisation Sequence        Boot progress report The Boot Software shall report its progress in  the Boot Report right after each test. [END]
Boot progress report in essential telemetry The Boot Software shall report its progress in  the High Priority Telemetry Boot Summary after each test. [END]
Boot reports alignment In case copies of the same Boot Report  are stored in different memory areas, the Boot Software shall keep these aligned during the progress updates. [END]
Boot report integrity The Boot Software shall allow chec king the integrity of the Boot Report . [END]
Multiple boot report The Boot Software shall allow to store in protected resource (e .g. Safeguard Memory) multiple Boot Report s in compliance with the number of autonomo us reconfiguration sequences foreseen at system level. [END]
Boot report memory slot selection The Boot Software shall select the memory slot where to store the Boot Report  in the protected resource (e.g. Safeguard Memory) depending on the last re levant recovery sequence executed by the reconfiguration function. [END]
Worst case execution time Boot Software worst case execution time shall be compatible with reconfiguration time system requirements. [END]
PUS service type ST[01]  - acce ptance and reporting subservice The Boot Software shall host an acceptan ce and reporting subservice provider. [END]
PUS service type ST[01]  - ex ecution reporting subservice The Boot Software shall host an execution reporting subservice provider. [END]
PUS service type ST[03] – hous ekeeping reporting subservice The Boot Software shall host an housek eeping reporting subservice provider. [END]
PUS service type ST[05] – event reporting subservice The Boot Software shall host an even t reporting subservice provider. [END]
PUS service type ST[06] – memory management service provider The Boot Software shall host a memory  management service provider. [END]
PUS service type ST[06] – raw data memory management The Boot Software related memory management service shall contain a raw data memory management subservice. [END]
PUS service type ST[06] – check raw memory data The raw data memory manageme nt subservice hosted by the Boot Software shall provide the capability to check raw memory data. [END]
PUS service type ST[17] – test subservice The Boot Software shall host a test subservice. [END]
PUS service type ST[20] – parameter management subservice The Boot Software shall host a paramete r management subservice provider. [END]
PUS service type ST[20] – set parameter values The parameter management subservice of the B oot Software shall provide the capability to set parameter values. [END]
Boot software processor initialisation storage The Boot Software code and read-only data related to  processor initialisation shall be stored in the processor Boot Memory. [END]
Boot software storage The Boot Software code and read-only data relate d to processor module Self-Tests, integrity tests, Application Software selection/copy/execution and Standby  function shall be stored in the processor Boot Memory or Application storage memory. [END]
Boot software independence The Boot Software shall be indepe ndent from the actual values of the Application Software image parameters. [END]
Boot report storage for Application Software The result of the tests ( Boot Report ) shall be stored in a pred efined area of processor working memory. [END]
Boot report storage for ground The result of the tests ( Boot Report ) shall be stored in a predefined area of nominal protected resource (e.g . Safeguard Memory). [END]
Boot report redundant storage for ground The result of the tests ( Boot Report ) shall be stored in a predefined area of redundant protected resource (e.g . Safeguard Memory). [END]
Boot reports nominal and redundant storage Boot Reports  generated by nominal and redundant processors shall not interfere with each other in the protec ted resource (e.g. Safeguard Memory). [END]
Boot report storage predefined area The Boot Software shall use a predefined area of working memory an d Application storage memory. [END]
Boot software sequential execution The Boot Software shall be independent of an  Operating System or run-time system. [END]
Boot software resources The Boot Software shall be designed to use the minimal proc essor module resources necessary to fulfil the requirements. [END]
Boot software engineering standard The Boot Software (including any Software libraries) shall be compliant to the ECSS-E-ST-40C. [END]
Boot software product assurance standard The Boot Software (including any Software libraries) shall be compliant to the ECSS-Q-ST-80C. [END]
Boot software coding standard The Boot Software shall be developed in complian ce with the applicable coding standards. [END]
Boot software criticality category The Boot Software (excepted the Monitor  function) criticality shall be at least category B. [END]
