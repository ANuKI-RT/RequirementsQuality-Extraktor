The Execution Platform shall provide the capabilities necessary to permit the execution of application software on a specific hardware platform.[END]
Each Operating SystemRA Execution Platform functional capability specified in this document shall be implemented as an architecturally distinct software layer or module.[END]
The onboard software execution entry point shall be located within the Execution Platform.[END]
Where an Operating System is used, this Operating System shall form part of the Execution Platform.[END]
Where a hypervisor is used, this hypervisor shall form part of the Execution Platform.[END]
The Execution Platform shall give application software an opportunity to initialise after Execution Platform initialisation but before multi-tasking task execution begins.[END]
The Execution Platform shall ensure that access to context memory (see Section 5.2.1.5) is available during initialisation.[END]
As part of the opportunity to initialise, the Execution Platform shall specify to the application software an identifier which may be used to specify the context which should be used for initialisation.[END]
The Execution Platform shall provide a mechanism for a partition to query its own status, and the status of other partitions (providing it has sufficient privileges) including its current operating mode.[END]
The Execution Platform shall provide a mechanism for a partition to control its own operating state/mode, and the state/mode of other partitions (providing it has sufficient privileges).[END]
The Execution Platform shall provide a mechanism for a partition to determine the current system execution schedule being used and, providing it has sufficient privileges, to switch the execution schedule to an alternative pre-configured schedule.[END]
The Execution Platform shall provide a mechanism for a partition to communicate with other partitions using queuing ports associated with communication channel  such that the partition with the destination queuing port may read messages, the partition with the source queuing port may send messages and either partition may query the port status.[END]
The Execution Platform shall provide a mechanism for a partition to communicate with other partitions using sampling ports associated with communication channel such that the partition with the destination sampling port may read messages, the partition with the source sampling port may send messages and either partition may query the port status.[END]
The Execution Platform shall provide a mechanism for executing multiple application software tasks or Execution Platform tasks.[END]
The Execution Platform shall provide mutual exclusion mechanisms so that resources may be protected against multiple access.[END]
The Execution Platform shall provide a synchronisation mechanism to permit one task to notify another task, potentially including additional context information.[END]
The Execution Platform shall provide a mechanism that guarantees atomic execution of a block of code.[END]
The Execution Platform shall provide a mech anism for applications  to report errors, including a severity indication.[END]
The Execution Platform shall provide a mechanism for reporting errors to applications, including a severity indication.[END]
The Execution Platform shall have the ability to respond to application errors which indicate a critical severity by restarting/r ebooting if necessary (see Section 5.2.2.1).[END]
The Execution Platform shall have the ability to log the occurrence of the first N errors, and after this initial storage space if full, then store in a circular buffer the last M errors. [END]
The Execution Platform shall provide to Ground  control the capability  of clearing error logs.[END]
The Execution Platform shall provide the capability for applications to query error logs.This capability shall be restricted to applicat ions having appropriate security privileges, if this notion is implemented on board.[END]
The Execution Platform shall provide read and write access to an area of memory whose contents are persistent across hardware and software restarts (e.g. safeguard memory).[END]
The Execution Platform shall provide read and write access to an additional, functionally separate, area of memory whose contents are persistent across hardware and software restarts (e.g. a second area of safeguard memory).[END]
The Execution Platform shall provide read-only access to an additional, functionally separate, area of memory whose contents are persistent across hardware and software restarts and may be written by external systems such as ground (e.g. a third area of safeguard memory).[END]
The Execution Platform shall provide the capability of storing in a safeguard memory the context data produced by applications or by the Execution platform.[END]
Where the onboard software implementation programming language requires language run time, the run time shall be considered to be part of the Execution Platform.[END]
Where support libraries, not tightly coupled to  an application, are available to support high-level functions, these libraries shall be considered part of the Execution Platform.[END]
Where low-level software is provided to facilitate execution on a specific hardware platform, such as a board support package (Board Support Package), this shall form part of the Execution Platform.[END]
The Execution Platform shall be responsible for managing memory, including low-level memory allocation.[END]
Where memory protection and/or spatial partitioning is required, the Execution Platform shall be responsible for providing these functions, using the underlying hardware if necessary.[END]
The Execution Platform shall be responsible for managing hardware interrupts.[END]
The Execution Platform shall be responsible for managing access to computing resources, including Central Processing Unit cores.[END]
Where Central Processing Unit execution time partitioning is required, the Execution Platform shall be responsible for providing this function, using the underlying hardware if necessary.[END]
The Execution Platform shall provide the capability for application software to indicate anunrecoverable malfunction.[END]
The Execution Platform shall provide mechanisms for the definition of the Fault Detection policy as a result of the detection of an unrecoverable malfunction.[END]
The Execution Platform shall permit application software to include death report information as part of a system fatal error report.[END]
The Execution Platform shall store death report information in a safe location, persistent across hardware and software restarts (e.g. safeguard memory).[END]
The Execution Platform shall store the occurrence of the first N errors, and after this initial storage space if full, then store in a circular buffer the last M errors. [END]
The Execution Platform shall provide the ability to query and delete death reports storedfrom previous fatal errors.[END]
The Execution Platform shall provide the capability for application software to indicate a non-fatal error.[END]
The Execution Platform shall permit application software to include additional information as part of a non-fatal error report incl uding the degree of severity of the error.[END]
The Execution Platform shall provide the capability to indicate to a supervisor partition that a non-fatal error has been generated in another partition.[END]
If the Execution Platform includes facilities for storage of non-fatal error reports the Execution Platform shall provide the ability to query and delete stored non-fatal error reports from previous  non-fatal errors.[END]
The Execution Platform shall provide the capability for application software to be able to request a restart and re-initialisation of the software executing on the computer. The Execution platform shall restrict the accessibility of this service to supervisor application software only, if such concept is supported by the Execution platform.[END]
The Execution Platform shall provide the capability for application software to be able to request a restart and re-initialisation of a single partition, if such concept is supported in the Execution Platform or a single application. The Execution platform shall restrict the accessibility of this service to supervisor application software only, if such concept is supported by the Execution platform.[END]
The Execution Platform shall provide the capability for application software to be able to request a restart and re-initialisation of the computer on which the software is running.The Execution platform shall restrict the accessibility of this service to supervisor application software only, if such concept is supported by the Execution platform.[END]
As part of a request for restart and re-initialisation, application software shall be permitted to specify an identifier which may be used to specify the context which should be used for the subsequent initialisation.[END]
The Execution Platform shall provide a capability for indicating to the application software that a non-fatal error has occurred in the Execution Platform.[END]
The Execution Platform shall provide read access to a monotonically increasing time source by the underlying hardware, if available.[END]
The Execution Platform shall provide write access to the monotonically increasing time source.[END]
The Execution Platform shall provide read access to additional time sources, where these are present.[END]
The Execution Platform shall provide write access to additional time sources, where these are present.[END]
Where synchronisation between time sources is required, the Execution Platform shall perform the necessary synchronisation.[END]
Where distribution of time value and synchronisation information is required, the Execution Platform shall perform the necessary distribution.[END]
The Execution Platform shall provide a File Management capability compliant to the File Management System specified in the Space Avionics Open Interface aRchitecture Data Storage System Requirements Document [RD.14].[END]
The implementation of a File Management System shall be part of the Execution Platform.[END]
The Execution Platform shall provide a Packet Store Management capability.[END]
The implementation of a Packet Store Management System shall be part of the Execution Platform.[END]
The implementation of a Packet Store Management capability, as per requirement Operating SystemRA-Execution Platform-HardwareE-FN-410 shall be compliant to the File Management System specified in the Space Avionics Open Interface aRchitecture Data Storage System Requirements Document [RD.14].[END]
The Execution Platform shall be capable of in voking commands provided by applications in response to requests from within the Execution Platform, external systems or other applications.[END]
The Execution Platform shall be capable of invoking commands provided by the Execution Platform in response to requests from within the Execution Platform, external systems or other applications.[END]
The Execution Platform shall be capable of receiving and acting upon command invocation requests from applications.[END]
Execution Platform command invocations shall permit the use of input argument values associated with the command.[END]
Execution Platform command invocations shall permit the use of output argument values associated with the successful execution of a command.[END]
Execution Platform command invocations shall permit an acknowledgement of correct or incorrect start of execution of a command, including status information, to be issued by the command provider in response to the invocation request.[END]
Execution Platform shall support issuing a report on the successful or unsuccessful completion of a command, to be issued by  the command provider in response to the invocation request.[END]
Execution Platform command invocations shall permit execution progress information to be issued by the command provider in response to the invocation request.[END]
The Execution Platform shall provide mechanisms to report data, if required, associated to the failure to start, execute or complete a command invocation.[END]
The Execution Platform shall permit the invocation of specific commands to be enabled/disabled such that the attempted invocation of a command that is disabled leads to a negative acknowledgement from the Execution Platform and does not lead to the command being invoked.[END]
The Execution Platform shall provide mechanisms to communicate the results of command invocation on commandable operations.[END]
The Execution Platform shall be capable of requ esting the value of parameters provided by applications in response to requests from within the Execution Platform, external systems or other applications.[END]
The Execution Platform shall be capable of requ esting the value of parameters provided by the Execution Platform in response to requests from within the Execution Platform, external systems or other applications.[END]
The Execution Platform shall be capable of returning parameter values in response to requests from the Execution Platform to the source of the value request.[END]
Should the request for a parameter value fail, the Execution Platform shall be capable of returning appropriate status information to the source of the value request.[END]
The Execution Platform shall support requests for mult iple parameter values.[END]
Where an application parameter is writeable, the Execution Platform shall be capable of setting the value of the parameter in response to requests from within the Execution Platform, external systems or other applications.[END]
Where an Execution Platform parameter is writeable, the Execution Platform shall be capable of setting the value of the parameter in response to requests from within the Execution Platform, external systems or other applications.[END]
Should the request to set a parameter value fail, the Execution Platform shall be capable of returning appropriate status information to the source of the value request.[END]
The Execution Platform shall support the definition of parameter report specifications, each of which identifies a list of one or more parameters and the required reporting period.[END]
The Execution Platform shall support the modification, addition and deletion of parameter report definitions by external systems.[END]
Periodic Parameter Value Report Generation (Housekeeping)The Execution Platform shall support the periodic generation (i.e., defined by a collectioninterval) of parame ter reports, according to parameter report specifications, which may be retained within the Execution Platform or communicated to an external system.[END]
The Execution Platform shall support the gene ration of parameter re ports, according to parameter report specifications, in response to other conditions such as changes in parameter values.[END]
The Execution Platform shall support the inclusion of super-commutated parameters in periodic parameter value repo rts, such that for each super-commutated parameter, Nsamples are included in each parameter value report.[END]
The Execution Platform shall support the en abling and disabling of parameter report generation.[END]
The Execution Platform shall permit the acquisition of telemetry from avionics devices.[END]
Telemetry data acquired from avionics devices by the Execution Platform shall be made available as parameters.[END]
Acquisition of avionic device telemetry data by the Execution Platform shall either be periodic, or on-demand, as required.[END]
The Execution Platform shall permit telemetry data acquired from avionics devices to be stored for a specified period of time (which may be infinite) during which the Execution Platform may use the stored data rather than requiring an additional acquisition from the device itself.[END]
The Execution Platform shall support the determination and recording of statistics on parameter values including minimum va lue, maximum value and average value.[END]
The Execution Platform shall support additional parameter value statistics, including minimum delta value, maximum delt a value and standard deviation.[END]
The Execution Platform shall support the definition of periodic monitoring checks on parameters to determine if their value or their delta falls within specified limits.[END]
The Execution Platform shall support the modification, addition and deletion of parameter monitoring check definitions by external systems.[END]
The Execution Platform shall support the periodic monitoring of parameter values to determine if their value or their delta falls within specified limits in accordance with the defined monitoring checks; a monitoring check shall change status only if N successive and consistent checks repo rt the same result.[END]
When a value or a value delta of a parameter being monitored passes from within to outside of the specified limits, the Execution Platform shall emit an onboard event.[END]
The Execution Platform shall support the definition of periodic monitoring checks on statistics parameters to determine if their value or their delta falls within specified limits.[END]
The Execution Platform shall support the modification, addition and deletion of parameter statistics monitoring check definitions by external systems.[END]
The Execution Platform shall support the periodic monitoring of parameter statistics to determine if their value or their delta falls within specified limits in accordance with the defined monitoring checks; a monitoring check shall change status only if N successive and consistent checks repo rt the same result.[END]
When a parameter statistics being monitored passes from within to outside of the specified limits, the Execution Platform shall emit an onboard event.[END]
The Execution Platform shall support the enabling and disabling of monitoring checks.[END]
The Execution Platform shall support the asynchronous emission of events by applications.[END]
The Execution Platform shall support the asynchronous emission of events by the Execution Platform.[END]
The Execution Platform shall support the reception by the Execution Platform of all, or specified, events emitted by applications and the Execution Platform.[END]
The Execution Platform shall support the reception by applications of all, or specified, events emitted by applications and the Execution Platform.[END]
The Execution Platform shall be capable of distributing events from emitters to receivers.[END]
The Execution Platform shall be capable of forwarding events to external systems (i.e. as part of the distribution of emitted events to event receivers).[END]
The Execution Platform shall be capable of enabling and disabling the distribution of individual and groups of events to external systems.[END]
The Execution Platform shall be capable of receiving events from external systems and distributing them appropriately within the Execution Platform and to applications.[END]
The Execution Platform shall provide a mechanism to timestamp events.[END]
The Execution Platform shall provide a mechanism to register a new event receiver.[END]
The Execution Platform shall provide a mechanism to unregister an event receiver.[END]
The Execution Platform shall support the asynchronous emission of datasets by applications.[END]
The Execution Platform shall support the reception of all, or specified, datasets by applications.[END]
The Execution Platform shall be capable of distributing datasets from emitters to receivers.[END]
The Execution Platform shall be capable of forwarding datasets to external systems (i.e. as part of the distribution of emitted datasets to dataset receivers) as observable telemetry.[END]
The Execution Platform shall be capable of enabling and disabling the distribution of individual and groups of datasets to external systems.[END]
The Execution Platform shall be capable of receiving datasets from external systems and distributing them appropriately within the Execution Platform and to applications.[END]
The Execution Platform shall provide a mechanism to timestamp datasets.[END]
The Execution Platform shall provide a mechanism to register a new dataset receiver.[END]
The Execution Platform shall provide a mechanism to unregister a dataset receiver.[END]
The Execution Platform shall be capable of storing command invocation, execution and progress information for later re trieval by external systems.[END]
The Execution Platform shall be capable of storing parameter value reports for later retrieval by external systems.[END]
The Execution Platform shall be capable of storing onboard events for later retrieval by external systems.[END]
The Execution Platform shall be capable of logging onboard datasets for later retrieval by external systems.[END]
The Execution Platform shall be capable of recording the time at which any item (command invocation, status or  progress, parameter value re port or event) is stored.[END]
The Execution Platform shall support the retrieval of stored information on the basis of time.[END]
The Execution Platform shall support the retrieval of logged information on the basis of item type (command invocation, status or progress, parameter report or event).[END]
The Execution Platform shall provide the capability to deactivating onboard storage. This capability shall be restricted to applications having appropriate security privileges, if this notion is implemented on board.[END]
The Execution Platform shall provide the capability to activating onboard storage. This capability shall be restricted to applications having appropriate security privileges, if this notion is implemented on board.[END]
The Execution Platform shall be capable of storing observable data products for later retrieval by external systems.[END]
The Execution Platform shall be capable of storing code functions invocation, parameters, variable values, fo r later retrieval by external systems.[END]
The Execution Platform shall provide the capability to deactivating logging. This capability shall be restricted to applications having appropriate security privileges, if this notion is implemented on board.[END]
The Execution Platform shall provide the capability to activating onboard logging. This capability shall be restricted to applications having appropriate security privileges, if this notion is implemented on board.[END]
The Execution Platform shall support the specification of sequences of commands, where each command is associated with an absolute time indicating when that command should be initiated. This sequence of absolutely-timed commands is an onboard schedule.[END]
The Execution Platform shall permit the concurrent specification of multiple absolute time command sequences (schedules).[END]
The Execution Platform shall clearly identify the source of time to be used for the timing of absolute time command sequences (schedules).[END]
The Execution Platform shall support the removal of absolute time command sequences (schedules).[END]
The Execution Platform shall support the modification of absolute time commandsequences (schedules).[END]
The Execution Platform shall support the execution of absolute time command sequences (schedules) which results in the initiation of each command in the sequence at the specified absolute time, if the command is enabled.[END]
The Execution Platform shall permit the execution progress of an absolute time commandsequence to be observed and monitored by ot her parts of the Executi on Platform and by external systems.[END]
The Execution Platform shall permit absolute time command sequences to be enabled/disabled such that only an enabled command sequence is considered for execution, whereas a disabled command sequence is not.[END]
Whenever the absolute time for execution of a command has passed, the command shall be deleted from the absolute time schedule.[END]
The Execution Platform shall support the specification of sequences of commands, where each operation is associated with a relative time indicating when that command should be initiated relative to the release of the last command in the sequence.[END]
The Execution Platform may permit the concurrent specification of multiple relative time command sequences.[END]
The Execution Platform shall clearly identify the source of time to be used for the timing of relative time command sequences.[END]
The Execution Platform shall support the removal of relative time command sequences.[END]
The Execution Platform shall support the modification of relative time commandsequences (schedules).[END]
The Execution Platform shall support the execution of relative time command sequences which results in the initiation of each command in the sequence at the specified time relative to the release of the previous command, with the first command in the sequence being initiated in response to an explicit command.[END]
The Execution Platform shall permit the execution progress of a relative time commandsequence to be observed and monitored by other parts of the Execution Platform and by external systems.[END]
The Execution Platform shall permit relative time command sequences to be enabled/disabled such that only an enabled command sequence is considered for execution, whereas a disabled operation sequence is not.[END]
Should an executing relative time command sequence be disabled then execution of the sequence shall be aborted meaning that execution does not resume if the sequence is re-enabled unless a further explicit command is received to re-start the sequence execution.[END]
The Execution Platform shall support the specification of sequences of commands, where each command is associated with a physical position indicating where that commandshould be initiated.[END]
The Execution Platform shall permit each step in the position command sequence to additionally specify a relative, positive time, indicating that the command should be initiated at the specified time relative to the time at which the physical position is reached. [END]
The Execution Platform shall permit each step in the position command sequence to additionally specify a relative, negative time, indicating that the command should be initiated at the specified time prior to the time at which the physical position is reached. [END]
The Execution Platform shall permit each command in the position operation schedule to be marked as either one-shot or persistent.[END]
The Execution Platform shall permit the concurrent specification of multiple position command sequences.[END]
The Execution Platform shall clearly identify the source of position and frame of reference to be used for the determination of location for the initiation of commands in a position command sequence, and the source of time for the specification of time offsets.[END]
The Execution Platform shall support the removal of position command sequences.[END]
The Execution Platform shall support the execution of position command sequences which results in the initiation of each command in the sequence when the physical position is reached, subject to the relative positive offset (if specified).[END]
The Execution Platform shall support the execution of position command sequences which results in the initiation of operation in the sequence with negative offset w.r.t. the physical position being reached.[END]
During execution of a position command sequence the Execution Platform shall disable any step marked as one-shot once the associated command has been initiated in order to prevent further initiation of that operation ev en if the time/position conditions necessary to cause command initiation are subsequently met for a second time.[END]
The Execution Platform shall permit the execution progress of a position commandsequence to be observed and monitored by other parts of the Execution Platform and by external systems.[END]
The Execution Platform shall permit position command sequences to be enabled/disabled such that only an enabled command sequence is considered for execution, whereas a disabled command sequence is not.[END]
The Execution Platform shall permit position command sequences to be reset, such that all one-shot sequence steps are re-enabled, and considered for initiation again.[END]
The Execution Platform shall support the specification of event-command pairs which associate the release of the specified command with the receipt of the specified event.[END]
The Execution Platform shall support the association of groups of event-command pairs to form event-operation pair sets such that an event-command pair is associated with one event-command set.[END]
The Execution Platform shall permit the concurrent specification of multiple sets of event-command pairs.[END]
The Execution Platform shall permit individual event-command pairs to be enabled and disabled.[END]
The Execution Platform shall permit event-command pair sets to be enabled and disabled.[END]
The Execution Platform shall support the removal of individual event-command pairs.[END]
The Execution Platform shall support the removal of event-command pair sets.[END]
The Execution Platform shall support the initiation of a command specified in an event-command pair when the associated event it received, provided that both the event-command pair and the set it is contained within are both enabled.[END]
The Execution Platform shall provide one or mo re Onboard Control Procedure engines each of which is capable of executing Onboard Control Procedures.[END]
The Execution Platform shall permit Onboard Control Procedures to be loaded into an Onboard Control Procedure engine.[END]
The Execution Platform shall permit to delete Onboard Control Procedures loaded into an Onboard Control Procedure engine.[END]
The Execution Platform shall permit each Onboard Control Procedure engine to begin executing a loaded Onboard Control Procedure in response to a command.[END]
The Execution Platform shall permit each Onboard Control Procedure engine to cleanly stop executing an Onboard Control Procedure which is being executed in response to a command.[END]
The Execution Platform shall permit each Onboard Control Procedure engine to immediately abort execution of an Onboard Control Procedure which is being executed in response to a command.[END]
The Execution Platform shall permit the execution status of an Onboard Control Procedure by an Onboard Control Procedure engine to be observed and monitored by other parts of the Execution Platform and by external systems.[END]
The Execution Platform shall permit each Onboard Control Procedure engine to be stopped in response to a command. At reception of a valid Onboard Control Procedure En gine Stop command, the execution of any currently executing Onboard Control Procedure shall be aborted; all Onboard Control Procedures shall be unloaded and the Onboard Control Procedure Engine status shall be set to “not running’.[END]
The Execution Platform shall permit each Onboard Control Procedure engine to start in response to a command. At reception of a valid Onboard Control Procedure Engine Execution Start command, the Onboard Control Procedure Engine status shall be set to “running”.[END]
The Execution Platform shall permit the ability to invoke specific Onboard Control Procedures to be enabled and disabled such that a request to begin execution of a disabled Onboard Control Procedure will result in an error.[END]
The Execution Platform shall be capable of communicating with external systems for the purpose of achieving Monitoring and Control.[END]
The Execution Platform shall fulfil the applicable mission requirements for Monitoring and Control communications with external systems:-t h r o u g h p u t ;-r e l i a b i l i t y ;- timeliness (jitter and latency);- coherency (in-order delivery).[END]
The Execution Platform shall be capable of tracking and indicating to an External System the delivery, result and status of any Monitoring and Control communication received from that external system.[END]
When required by the underlying operation, the Execution Platform shall be capable of communicating the progress of an onboard operation to an external system.[END]
The Execution Platform shall be capable of filtering Monitoring and Control communications with external systems such that individual types of Monitoring and Control communications can be enabled/disabled.[END]
The Execution Platform shall deliver onboard data products to external systems, either directly or indirectly, by fulfilling the applicable mission requirements related to:-t h r o u g h p u t ;-r e l i a b i l i t y ;- timeliness (jitter and latency); - coherency (in-order delivery).[END]
The Execution Platform shall receive onboard data products from external systems, either directly or indirectly, by fulfilling the applicable mission requirements related to:-t h r o u g h p u t ;-r e l i a b i l i t y ;- timeliness (jitter and latency); - coherency (in-order delivery).[END]
The Execution Platform shall provide access to onboard storage management functions (as specified in Sections [END]
The Execution Platform shall be capable of communicating with other onboard computers, where required. It is left to mission-specific requirements whether those computers belong to the same avionics and software system, or shall be considered external systems.[END]
The Execution Platform shall provide access to each onboard communication systems, with the operations supported reflecting the semantics of the underlying technology.[END]
The Execution Platform shall provide at least those operations necessary to support the devices present on a given on-board communication system.[END]
The Execution Platform shall provide the capability to synchronise operations on an on-board communication system to either a software-derived timing source, an on-board communication system derived timing source or an independent hardware-derived timing source where such a capability is necessary to support the device access patterns required for the mission.[END]
The Execution Platform shall provide the capability to configure and manage on-board communication system resources, such as link /bus interfaces and routing switches, where such resources are present.[END]
The Execution Platform shall provide the capability to interrogate and/or discover the topology of an on-board communication system, together with the basic identities of devices present on it, should the underlying technology support this.[END]
The Execution Platform shall provide the capability to manage on-board communication system redundancy at both the link and network/bus levels.[END]
Making use of On-board Communication Access functions, the Execution Platform shall provide the ability to communicate with all relevant avionics devices on board.[END]
The Execution Platform shall permit interaction with avionics devices in terms of the basic operations defined by each device, including the ability to command and configure devices and sample device telemetry.[END]
The Execution Platform shall provide the capability to command and configure the avionics device in terms of an accepted set of standard behaviours for the releva nt type of avionics device.[END]
The Execution Platform shall provide the capability to convert telemetry values sampled from avionics devices from raw, measured quantities to standard engineering units.[END]
The Execution Platform shall provide the capability to synchronise avionics device operations to either a software-derived timing source, an on-board communication system-derived timing source or an independent hardware-derived timing source where such a capability is necessary to support the required device access patterns.[END]
The Execution Platform shall provide the capability to manage avionic device redundancy where relevant. If required, this should include the potential to manage either hot or cold (or warm) redundancy.[END]
The Execution Platform shall provide the capability for external systems to read from all externally-accessible onboard memory and storage devices at the byte level.[END]
The Execution Platform shall provide the capability for external systems to write to all externally-accessible onboard memory and storage devices at the byte level where such memory/storage is writable.[END]
The Execution Platform shall provide the capability for external systems to carry out operations of onboard communication systems, with the operations supported reflecting the semantics of the underlying technology.[END]
The Execution Platform shall provide the capability for external systems to interact with avionics devices in terms of the basic operations defined by each device, including the ability to command and configure devices and sample device telemetry.[END]
The Execution Platform shall provide the capability for external systems to query the value of onboard time sources.[END]
The Execution Platform shall provide the capability for the reply to a time query request by an external system to be synchronised to the RF communications system such that the onboard latency and jitter of the time query reply are characterised.[END]
The Execution Platform shall ensure that any state which may be modified by applications, such as the ability enable or disable a function, is also observable to applications.[END]
The Execution Platform shall make available to applications all tasking and concurrency functions as specified in Section 5.2.1.3.[END]
The Execution Platform shall make available to applications the ability to read and write to application context memory stored in the primary and secondary safeguard regions as specified in Section 5.2.1.5.[END]
The Execution Platform shall make available to applications all relevant software libraries as specified in Section 5.2.1.6.[END]
The Execution Platform shall make available to applications the ability to enable and disable parameter report  generation as specified in Section 5.2.3.2.[END]
The Execution Platform shall make available to applications the ability to enable and disable event forwarding to external systems as specified in Section 5.2.3.5.[END]
The Execution Platform shall make available to applications the ability to enable and disable dataset forwarding to external systems as specified in Section 5.2.3.6.[END]
The Execution Platform shall make available to applications the ability to enable and disable monitoring checks as specified in Section 5.2.3.4.[END]
The Execution Platform shall make available the ability invoke commands as specified in Section 5.2.3.1.[END]
The Execution Platform shall make available to applications the ability to enable and disable absolute and relative time operatio n sequences as specified in Section 5.2.4.1.[END]
The Execution Platform shall make available to applications the ability to enable and disable position operation sequences as specified in Section 5.2.4.2.[END]
The Execution Platform shall make available to applications the ability to enable anddisable event-command pairs and sets as specified in Section 5.2.4.3.[END]
The Execution Platform shall make available to applications the ability to enable and disable types of Monitoring and Control communication with external systems as specified in Section 5.2.5.1.[END]
The Execution Platform shall make available to applications the ability to start, stop andabort Onboard Control Procedures as specified in Section 5.2.4.4.[END]
The Execution Platform shall make available to applications the ability to request software and hardware platform restart as  specified in Section 5.2.2.1.[END]
The Execution Platform shall make available to applications the ability to report non-fatal errors and receive non-fatal error indica tions as specified in Section 5.2.1.4.[END]
The Execution Platform shall make available to applications the ability to report fatal errors as specified in Section 5.2.1.4.[END]
The Execution Platform shall make available to applications all partition management functions as specified in Section 5.2.1.2.[END]
The Execution Platform shall make available to applications the ability t0 request the current time from any onboard time source supported by the Execution Platform as specified in Section 4.2.2.2. This capability shall be restricted to applications having appropriate security privileges, if this notion is implemented on board.[END]
The Execution Platform shall make available to applications the ability to interact with avionics devices in terms of the basic operations defined by each device, including the ability to command and configure devices and sample device telemetry as specified in Section 5.2.6.2.[END]
The Execution Platform shall make available to applications the ability to interact with avionics devices in terms of an accepted set of standard behaviours for the relevant type of avionics device with telemetry being supplied in standard engineering units as specified in Section 5.2.6.2.[END]
The Execution Platform shall make available avionics device telemetry which has been pooled through periodic or asynchronous acqu isition as part of Monitoring and Control features as specified in Section 5.2.3.3.[END]
The Execution Platform shall make available to applications the ability to interact with files in terms of an accepted set of standard behaviours as specified in section 5.2.2.3.[END]